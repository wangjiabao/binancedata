// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: api/binancedata/v1/binancedata.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PullBinanceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *PullBinanceDataRequest) Reset() {
	*x = PullBinanceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBinanceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBinanceDataRequest) ProtoMessage() {}

func (x *PullBinanceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBinanceDataRequest.ProtoReflect.Descriptor instead.
func (*PullBinanceDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{0}
}

func (x *PullBinanceDataRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

type PullBinanceDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullBinanceDataReply) Reset() {
	*x = PullBinanceDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBinanceDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBinanceDataReply) ProtoMessage() {}

func (x *PullBinanceDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBinanceDataReply.ProtoReflect.Descriptor instead.
func (*PullBinanceDataReply) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{1}
}

type XNIntervalMAvgEndPriceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *XNIntervalMAvgEndPriceDataRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataRequest) Reset() {
	*x = XNIntervalMAvgEndPriceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataRequest) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataRequest.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{2}
}

func (x *XNIntervalMAvgEndPriceDataRequest) GetSendBody() *XNIntervalMAvgEndPriceDataRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type XNIntervalMAvgEndPriceDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataListK           []*XNIntervalMAvgEndPriceDataReply_ListK       `protobuf:"bytes,1,rep,name=dataListK,proto3" json:"dataListK,omitempty"`
	DataListMa5M5       []*XNIntervalMAvgEndPriceDataReply_ListMa5M5   `protobuf:"bytes,6,rep,name=dataListMa5M5,proto3" json:"dataListMa5M5,omitempty"`
	DataListMa10M5      []*XNIntervalMAvgEndPriceDataReply_ListMa10M5  `protobuf:"bytes,7,rep,name=dataListMa10M5,proto3" json:"dataListMa10M5,omitempty"`
	DataListMa5M15      []*XNIntervalMAvgEndPriceDataReply_ListMa5M15  `protobuf:"bytes,8,rep,name=dataListMa5M15,proto3" json:"dataListMa5M15,omitempty"`
	DataListMa10M15     []*XNIntervalMAvgEndPriceDataReply_ListMa10M15 `protobuf:"bytes,9,rep,name=dataListMa10M15,proto3" json:"dataListMa10M15,omitempty"`
	DataListMa5M60      []*XNIntervalMAvgEndPriceDataReply_ListMa5M60  `protobuf:"bytes,10,rep,name=dataListMa5M60,proto3" json:"dataListMa5M60,omitempty"`
	DataListMa10M60     []*XNIntervalMAvgEndPriceDataReply_ListMa10M60 `protobuf:"bytes,11,rep,name=dataListMa10M60,proto3" json:"dataListMa10M60,omitempty"`
	OperationData       []*XNIntervalMAvgEndPriceDataReply_List2       `protobuf:"bytes,2,rep,name=operationData,proto3" json:"operationData,omitempty"`
	OperationOrderTotal int64                                          `protobuf:"varint,3,opt,name=operationOrderTotal,proto3" json:"operationOrderTotal,omitempty"`
	OperationWinRate    string                                         `protobuf:"bytes,4,opt,name=operationWinRate,proto3" json:"operationWinRate,omitempty"`
	OperationWinAmount  string                                         `protobuf:"bytes,5,opt,name=operationWinAmount,proto3" json:"operationWinAmount,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3}
}

func (x *XNIntervalMAvgEndPriceDataReply) GetDataListK() []*XNIntervalMAvgEndPriceDataReply_ListK {
	if x != nil {
		return x.DataListK
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetDataListMa5M5() []*XNIntervalMAvgEndPriceDataReply_ListMa5M5 {
	if x != nil {
		return x.DataListMa5M5
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetDataListMa10M5() []*XNIntervalMAvgEndPriceDataReply_ListMa10M5 {
	if x != nil {
		return x.DataListMa10M5
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetDataListMa5M15() []*XNIntervalMAvgEndPriceDataReply_ListMa5M15 {
	if x != nil {
		return x.DataListMa5M15
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetDataListMa10M15() []*XNIntervalMAvgEndPriceDataReply_ListMa10M15 {
	if x != nil {
		return x.DataListMa10M15
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetDataListMa5M60() []*XNIntervalMAvgEndPriceDataReply_ListMa5M60 {
	if x != nil {
		return x.DataListMa5M60
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetDataListMa10M60() []*XNIntervalMAvgEndPriceDataReply_ListMa10M60 {
	if x != nil {
		return x.DataListMa10M60
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetOperationData() []*XNIntervalMAvgEndPriceDataReply_List2 {
	if x != nil {
		return x.OperationData
	}
	return nil
}

func (x *XNIntervalMAvgEndPriceDataReply) GetOperationOrderTotal() int64 {
	if x != nil {
		return x.OperationOrderTotal
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply) GetOperationWinRate() string {
	if x != nil {
		return x.OperationWinRate
	}
	return ""
}

func (x *XNIntervalMAvgEndPriceDataReply) GetOperationWinAmount() string {
	if x != nil {
		return x.OperationWinAmount
	}
	return ""
}

type KAnd2NIntervalMAvgEndPriceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataRequest) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataRequest.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{4}
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest) GetSendBody() *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type KAnd2NIntervalMAvgEndPriceDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataListK           []*KAnd2NIntervalMAvgEndPriceDataReply_ListK          `protobuf:"bytes,1,rep,name=dataListK,proto3" json:"dataListK,omitempty"`
	DataListMaNMFirst   []*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst  `protobuf:"bytes,2,rep,name=dataListMaNMFirst,proto3" json:"dataListMaNMFirst,omitempty"`
	DataListMaNMSecond  []*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond `protobuf:"bytes,3,rep,name=dataListMaNMSecond,proto3" json:"dataListMaNMSecond,omitempty"`
	BackGround          []*KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround `protobuf:"bytes,4,rep,name=backGround,proto3" json:"backGround,omitempty"`
	OperationData       []*KAnd2NIntervalMAvgEndPriceDataReply_List2          `protobuf:"bytes,6,rep,name=operationData,proto3" json:"operationData,omitempty"`
	OperationOrderTotal int64                                                 `protobuf:"varint,7,opt,name=operationOrderTotal,proto3" json:"operationOrderTotal,omitempty"`
	OperationWinRate    string                                                `protobuf:"bytes,8,opt,name=operationWinRate,proto3" json:"operationWinRate,omitempty"`
	OperationWinAmount  string                                                `protobuf:"bytes,9,opt,name=operationWinAmount,proto3" json:"operationWinAmount,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataReply) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataReply.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataReply) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{5}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetDataListK() []*KAnd2NIntervalMAvgEndPriceDataReply_ListK {
	if x != nil {
		return x.DataListK
	}
	return nil
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetDataListMaNMFirst() []*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst {
	if x != nil {
		return x.DataListMaNMFirst
	}
	return nil
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetDataListMaNMSecond() []*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond {
	if x != nil {
		return x.DataListMaNMSecond
	}
	return nil
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetBackGround() []*KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround {
	if x != nil {
		return x.BackGround
	}
	return nil
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetOperationData() []*KAnd2NIntervalMAvgEndPriceDataReply_List2 {
	if x != nil {
		return x.OperationData
	}
	return nil
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetOperationOrderTotal() int64 {
	if x != nil {
		return x.OperationOrderTotal
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetOperationWinRate() string {
	if x != nil {
		return x.OperationWinRate
	}
	return ""
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply) GetOperationWinAmount() string {
	if x != nil {
		return x.OperationWinAmount
	}
	return ""
}

type IntervalMAvgEndPriceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start           string  `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End             string  `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	M               int32   `protobuf:"varint,3,opt,name=m,proto3" json:"m,omitempty"`
	N               int32   `protobuf:"varint,4,opt,name=n,proto3" json:"n,omitempty"`
	Fee             float64 `protobuf:"fixed64,5,opt,name=fee,proto3" json:"fee,omitempty"`
	TargetCloseRate float64 `protobuf:"fixed64,6,opt,name=target_close_rate,json=targetCloseRate,proto3" json:"target_close_rate,omitempty"`
}

func (x *IntervalMAvgEndPriceDataRequest) Reset() {
	*x = IntervalMAvgEndPriceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMAvgEndPriceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMAvgEndPriceDataRequest) ProtoMessage() {}

func (x *IntervalMAvgEndPriceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMAvgEndPriceDataRequest.ProtoReflect.Descriptor instead.
func (*IntervalMAvgEndPriceDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{6}
}

func (x *IntervalMAvgEndPriceDataRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *IntervalMAvgEndPriceDataRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *IntervalMAvgEndPriceDataRequest) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataRequest) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataRequest) GetTargetCloseRate() float64 {
	if x != nil {
		return x.TargetCloseRate
	}
	return 0
}

type IntervalMAvgEndPriceDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataListK           []*IntervalMAvgEndPriceDataReply_ListK         `protobuf:"bytes,1,rep,name=dataListK,proto3" json:"dataListK,omitempty"`
	DataListMaNMFirst   []*IntervalMAvgEndPriceDataReply_ListMaNMFirst `protobuf:"bytes,2,rep,name=dataListMaNMFirst,proto3" json:"dataListMaNMFirst,omitempty"`
	OperationData       []*IntervalMAvgEndPriceDataReply_List2         `protobuf:"bytes,6,rep,name=operationData,proto3" json:"operationData,omitempty"`
	OperationOrderTotal int64                                          `protobuf:"varint,3,opt,name=operationOrderTotal,proto3" json:"operationOrderTotal,omitempty"`
	OperationWinRate    string                                         `protobuf:"bytes,4,opt,name=operationWinRate,proto3" json:"operationWinRate,omitempty"`
	OperationWinAmount  string                                         `protobuf:"bytes,5,opt,name=operationWinAmount,proto3" json:"operationWinAmount,omitempty"`
}

func (x *IntervalMAvgEndPriceDataReply) Reset() {
	*x = IntervalMAvgEndPriceDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMAvgEndPriceDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMAvgEndPriceDataReply) ProtoMessage() {}

func (x *IntervalMAvgEndPriceDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMAvgEndPriceDataReply.ProtoReflect.Descriptor instead.
func (*IntervalMAvgEndPriceDataReply) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{7}
}

func (x *IntervalMAvgEndPriceDataReply) GetDataListK() []*IntervalMAvgEndPriceDataReply_ListK {
	if x != nil {
		return x.DataListK
	}
	return nil
}

func (x *IntervalMAvgEndPriceDataReply) GetDataListMaNMFirst() []*IntervalMAvgEndPriceDataReply_ListMaNMFirst {
	if x != nil {
		return x.DataListMaNMFirst
	}
	return nil
}

func (x *IntervalMAvgEndPriceDataReply) GetOperationData() []*IntervalMAvgEndPriceDataReply_List2 {
	if x != nil {
		return x.OperationData
	}
	return nil
}

func (x *IntervalMAvgEndPriceDataReply) GetOperationOrderTotal() int64 {
	if x != nil {
		return x.OperationOrderTotal
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply) GetOperationWinRate() string {
	if x != nil {
		return x.OperationWinRate
	}
	return ""
}

func (x *IntervalMAvgEndPriceDataReply) GetOperationWinAmount() string {
	if x != nil {
		return x.OperationWinAmount
	}
	return ""
}

type IntervalMMACDDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	M     int32  `protobuf:"varint,3,opt,name=m,proto3" json:"m,omitempty"`
	N     int32  `protobuf:"varint,4,opt,name=n,proto3" json:"n,omitempty"`
	K     int32  `protobuf:"varint,5,opt,name=k,proto3" json:"k,omitempty"`
}

func (x *IntervalMMACDDataRequest) Reset() {
	*x = IntervalMMACDDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMMACDDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMMACDDataRequest) ProtoMessage() {}

func (x *IntervalMMACDDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMMACDDataRequest.ProtoReflect.Descriptor instead.
func (*IntervalMMACDDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{8}
}

func (x *IntervalMMACDDataRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *IntervalMMACDDataRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *IntervalMMACDDataRequest) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *IntervalMMACDDataRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *IntervalMMACDDataRequest) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

type IntervalMMACDDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataListK           []*IntervalMMACDDataReply_ListK    `protobuf:"bytes,1,rep,name=dataListK,proto3" json:"dataListK,omitempty"`
	DataListMacd        []*IntervalMMACDDataReply_ListMacd `protobuf:"bytes,2,rep,name=dataListMacd,proto3" json:"dataListMacd,omitempty"`
	OperationData       []*IntervalMMACDDataReply_List2    `protobuf:"bytes,6,rep,name=operationData,proto3" json:"operationData,omitempty"`
	OperationOrderTotal int64                              `protobuf:"varint,3,opt,name=operationOrderTotal,proto3" json:"operationOrderTotal,omitempty"`
	OperationWinRate    string                             `protobuf:"bytes,4,opt,name=operationWinRate,proto3" json:"operationWinRate,omitempty"`
	OperationWinAmount  string                             `protobuf:"bytes,5,opt,name=operationWinAmount,proto3" json:"operationWinAmount,omitempty"`
}

func (x *IntervalMMACDDataReply) Reset() {
	*x = IntervalMMACDDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMMACDDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMMACDDataReply) ProtoMessage() {}

func (x *IntervalMMACDDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMMACDDataReply.ProtoReflect.Descriptor instead.
func (*IntervalMMACDDataReply) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{9}
}

func (x *IntervalMMACDDataReply) GetDataListK() []*IntervalMMACDDataReply_ListK {
	if x != nil {
		return x.DataListK
	}
	return nil
}

func (x *IntervalMMACDDataReply) GetDataListMacd() []*IntervalMMACDDataReply_ListMacd {
	if x != nil {
		return x.DataListMacd
	}
	return nil
}

func (x *IntervalMMACDDataReply) GetOperationData() []*IntervalMMACDDataReply_List2 {
	if x != nil {
		return x.OperationData
	}
	return nil
}

func (x *IntervalMMACDDataReply) GetOperationOrderTotal() int64 {
	if x != nil {
		return x.OperationOrderTotal
	}
	return 0
}

func (x *IntervalMMACDDataReply) GetOperationWinRate() string {
	if x != nil {
		return x.OperationWinRate
	}
	return ""
}

func (x *IntervalMMACDDataReply) GetOperationWinAmount() string {
	if x != nil {
		return x.OperationWinAmount
	}
	return ""
}

type IntervalMKAndMACDDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	M     int32  `protobuf:"varint,3,opt,name=m,proto3" json:"m,omitempty"`
	N     int32  `protobuf:"varint,4,opt,name=n,proto3" json:"n,omitempty"`
	K     int32  `protobuf:"varint,5,opt,name=k,proto3" json:"k,omitempty"`
}

func (x *IntervalMKAndMACDDataRequest) Reset() {
	*x = IntervalMKAndMACDDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMKAndMACDDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMKAndMACDDataRequest) ProtoMessage() {}

func (x *IntervalMKAndMACDDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMKAndMACDDataRequest.ProtoReflect.Descriptor instead.
func (*IntervalMKAndMACDDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{10}
}

func (x *IntervalMKAndMACDDataRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *IntervalMKAndMACDDataRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *IntervalMKAndMACDDataRequest) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *IntervalMKAndMACDDataRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *IntervalMKAndMACDDataRequest) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

type IntervalMKAndMACDDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataListK           []*IntervalMKAndMACDDataReply_ListK `protobuf:"bytes,1,rep,name=dataListK,proto3" json:"dataListK,omitempty"`
	OperationData       []*IntervalMKAndMACDDataReply_List2 `protobuf:"bytes,6,rep,name=operationData,proto3" json:"operationData,omitempty"`
	OperationOrderTotal int64                               `protobuf:"varint,3,opt,name=operationOrderTotal,proto3" json:"operationOrderTotal,omitempty"`
	OperationWinRate    string                              `protobuf:"bytes,4,opt,name=operationWinRate,proto3" json:"operationWinRate,omitempty"`
	OperationWinAmount  string                              `protobuf:"bytes,5,opt,name=operationWinAmount,proto3" json:"operationWinAmount,omitempty"`
}

func (x *IntervalMKAndMACDDataReply) Reset() {
	*x = IntervalMKAndMACDDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMKAndMACDDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMKAndMACDDataReply) ProtoMessage() {}

func (x *IntervalMKAndMACDDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMKAndMACDDataReply.ProtoReflect.Descriptor instead.
func (*IntervalMKAndMACDDataReply) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{11}
}

func (x *IntervalMKAndMACDDataReply) GetDataListK() []*IntervalMKAndMACDDataReply_ListK {
	if x != nil {
		return x.DataListK
	}
	return nil
}

func (x *IntervalMKAndMACDDataReply) GetOperationData() []*IntervalMKAndMACDDataReply_List2 {
	if x != nil {
		return x.OperationData
	}
	return nil
}

func (x *IntervalMKAndMACDDataReply) GetOperationOrderTotal() int64 {
	if x != nil {
		return x.OperationOrderTotal
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply) GetOperationWinRate() string {
	if x != nil {
		return x.OperationWinRate
	}
	return ""
}

func (x *IntervalMKAndMACDDataReply) GetOperationWinAmount() string {
	if x != nil {
		return x.OperationWinAmount
	}
	return ""
}

type XNIntervalMAvgEndPriceDataRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string                                             `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string                                             `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	N1    int32                                              `protobuf:"varint,3,opt,name=n1,proto3" json:"n1,omitempty"`
	N2    int32                                              `protobuf:"varint,4,opt,name=n2,proto3" json:"n2,omitempty"`
	X     []*XNIntervalMAvgEndPriceDataRequest_SendBody_List `protobuf:"bytes,5,rep,name=x,proto3" json:"x,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) Reset() {
	*x = XNIntervalMAvgEndPriceDataRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataRequest_SendBody) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataRequest_SendBody.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{2, 0}
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) GetN1() int32 {
	if x != nil {
		return x.N1
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) GetN2() int32 {
	if x != nil {
		return x.N2
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody) GetX() []*XNIntervalMAvgEndPriceDataRequest_SendBody_List {
	if x != nil {
		return x.X
	}
	return nil
}

type XNIntervalMAvgEndPriceDataRequest_SendBody_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M      int64  `protobuf:"varint,1,opt,name=m,proto3" json:"m,omitempty"`
	N      int64  `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody_List) Reset() {
	*x = XNIntervalMAvgEndPriceDataRequest_SendBody_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataRequest_SendBody_List) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody_List) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataRequest_SendBody_List.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataRequest_SendBody_List) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody_List) GetM() int64 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody_List) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataRequest_SendBody_List) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type XNIntervalMAvgEndPriceDataReply_ListK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrice  float64 `protobuf:"fixed64,1,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	EndPrice    float64 `protobuf:"fixed64,2,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	TopPrice    float64 `protobuf:"fixed64,3,opt,name=top_price,json=topPrice,proto3" json:"top_price,omitempty"`
	LowPrice    float64 `protobuf:"fixed64,4,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	AvgEndPrice float64 `protobuf:"fixed64,5,opt,name=avg_end_price,json=avgEndPrice,proto3" json:"avg_end_price,omitempty"`
	Time        int64   `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_ListK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_ListK) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_ListK.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_ListK) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 0}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) GetStartPrice() float64 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) GetTopPrice() float64 {
	if x != nil {
		return x.TopPrice
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) GetAvgEndPrice() float64 {
	if x != nil {
		return x.AvgEndPrice
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_ListK) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type XNIntervalMAvgEndPriceDataReply_ListMa5M5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgEndPrice float64 `protobuf:"fixed64,5,opt,name=avg_end_price,json=avgEndPrice,proto3" json:"avg_end_price,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M5) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_ListMa5M5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_ListMa5M5) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M5) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_ListMa5M5.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_ListMa5M5) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 1}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M5) GetAvgEndPrice() float64 {
	if x != nil {
		return x.AvgEndPrice
	}
	return 0
}

type XNIntervalMAvgEndPriceDataReply_ListMa10M5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgEndPrice float64 `protobuf:"fixed64,5,opt,name=avg_end_price,json=avgEndPrice,proto3" json:"avg_end_price,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M5) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_ListMa10M5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_ListMa10M5) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M5) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_ListMa10M5.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_ListMa10M5) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 2}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M5) GetAvgEndPrice() float64 {
	if x != nil {
		return x.AvgEndPrice
	}
	return 0
}

type XNIntervalMAvgEndPriceDataReply_ListMa5M15 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgEndPrice float64 `protobuf:"fixed64,5,opt,name=avg_end_price,json=avgEndPrice,proto3" json:"avg_end_price,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M15) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_ListMa5M15{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M15) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_ListMa5M15) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M15) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_ListMa5M15.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_ListMa5M15) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 3}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M15) GetAvgEndPrice() float64 {
	if x != nil {
		return x.AvgEndPrice
	}
	return 0
}

type XNIntervalMAvgEndPriceDataReply_ListMa10M15 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgEndPrice float64 `protobuf:"fixed64,5,opt,name=avg_end_price,json=avgEndPrice,proto3" json:"avg_end_price,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M15) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_ListMa10M15{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M15) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_ListMa10M15) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M15) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_ListMa10M15.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_ListMa10M15) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 4}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M15) GetAvgEndPrice() float64 {
	if x != nil {
		return x.AvgEndPrice
	}
	return 0
}

type XNIntervalMAvgEndPriceDataReply_ListMa5M60 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgEndPrice float64 `protobuf:"fixed64,5,opt,name=avg_end_price,json=avgEndPrice,proto3" json:"avg_end_price,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M60) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_ListMa5M60{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M60) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_ListMa5M60) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M60) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_ListMa5M60.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_ListMa5M60) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 5}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa5M60) GetAvgEndPrice() float64 {
	if x != nil {
		return x.AvgEndPrice
	}
	return 0
}

type XNIntervalMAvgEndPriceDataReply_ListMa10M60 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgEndPrice float64 `protobuf:"fixed64,5,opt,name=avg_end_price,json=avgEndPrice,proto3" json:"avg_end_price,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M60) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_ListMa10M60{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M60) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_ListMa10M60) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M60) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_ListMa10M60.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_ListMa10M60) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 6}
}

func (x *XNIntervalMAvgEndPriceDataReply_ListMa10M60) GetAvgEndPrice() float64 {
	if x != nil {
		return x.AvgEndPrice
	}
	return 0
}

type XNIntervalMAvgEndPriceDataReply_List2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrice float64 `protobuf:"fixed64,1,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	EndPrice   float64 `protobuf:"fixed64,2,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	StartTime  int64   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64   `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type       string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Status     string  `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Rate       float64 `protobuf:"fixed64,9,opt,name=rate,proto3" json:"rate,omitempty"`
	Action     string  `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) Reset() {
	*x = XNIntervalMAvgEndPriceDataReply_List2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNIntervalMAvgEndPriceDataReply_List2) ProtoMessage() {}

func (x *XNIntervalMAvgEndPriceDataReply_List2) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNIntervalMAvgEndPriceDataReply_List2.ProtoReflect.Descriptor instead.
func (*XNIntervalMAvgEndPriceDataReply_List2) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{3, 7}
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetStartPrice() float64 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *XNIntervalMAvgEndPriceDataReply_List2) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type KAnd2NIntervalMAvgEndPriceDataRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start               string  `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                 string  `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	N1                  int32   `protobuf:"varint,3,opt,name=n1,proto3" json:"n1,omitempty"`
	N2                  int32   `protobuf:"varint,4,opt,name=n2,proto3" json:"n2,omitempty"`
	M1                  int32   `protobuf:"varint,5,opt,name=m1,proto3" json:"m1,omitempty"`
	M2                  int32   `protobuf:"varint,6,opt,name=m2,proto3" json:"m2,omitempty"`
	TopX                float64 `protobuf:"fixed64,7,opt,name=top_x,json=topX,proto3" json:"top_x,omitempty"`
	LowX                float64 `protobuf:"fixed64,8,opt,name=low_x,json=lowX,proto3" json:"low_x,omitempty"`
	Fee                 float64 `protobuf:"fixed64,9,opt,name=fee,proto3" json:"fee,omitempty"`
	CloseCondition      int32   `protobuf:"varint,10,opt,name=close_condition,json=closeCondition,proto3" json:"close_condition,omitempty"`
	CloseCondition2Rate float64 `protobuf:"fixed64,11,opt,name=close_condition2_rate,json=closeCondition2Rate,proto3" json:"close_condition2_rate,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataRequest_SendBody.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{4, 0}
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetN1() int32 {
	if x != nil {
		return x.N1
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetN2() int32 {
	if x != nil {
		return x.N2
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetM1() int32 {
	if x != nil {
		return x.M1
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetM2() int32 {
	if x != nil {
		return x.M2
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetTopX() float64 {
	if x != nil {
		return x.TopX
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetLowX() float64 {
	if x != nil {
		return x.LowX
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetCloseCondition() int32 {
	if x != nil {
		return x.CloseCondition
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) GetCloseCondition2Rate() float64 {
	if x != nil {
		return x.CloseCondition2Rate
	}
	return 0
}

type KAnd2NIntervalMAvgEndPriceDataReply_ListK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
	X2 float64 `protobuf:"fixed64,2,opt,name=x2,proto3" json:"x2,omitempty"`
	X3 float64 `protobuf:"fixed64,3,opt,name=x3,proto3" json:"x3,omitempty"`
	X4 float64 `protobuf:"fixed64,4,opt,name=x4,proto3" json:"x4,omitempty"`
	X5 int64   `protobuf:"varint,5,opt,name=x5,proto3" json:"x5,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataReply_ListK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataReply_ListK) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataReply_ListK.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataReply_ListK) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{5, 0}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) GetX2() float64 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) GetX3() float64 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) GetX4() float64 {
	if x != nil {
		return x.X4
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListK) GetX5() int64 {
	if x != nil {
		return x.X5
	}
	return 0
}

type KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{5, 1}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

type KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{5, 2}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

type KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 string `protobuf:"bytes,1,opt,name=x1,proto3" json:"x1,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{5, 3}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) GetX1() string {
	if x != nil {
		return x.X1
	}
	return ""
}

type KAnd2NIntervalMAvgEndPriceDataReply_List2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrice float64 `protobuf:"fixed64,1,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	EndPrice   float64 `protobuf:"fixed64,2,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	StartTime  int64   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64   `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type       string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Status     string  `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Rate       float64 `protobuf:"fixed64,9,opt,name=rate,proto3" json:"rate,omitempty"`
	Action     string  `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) Reset() {
	*x = KAnd2NIntervalMAvgEndPriceDataReply_List2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KAnd2NIntervalMAvgEndPriceDataReply_List2) ProtoMessage() {}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KAnd2NIntervalMAvgEndPriceDataReply_List2.ProtoReflect.Descriptor instead.
func (*KAnd2NIntervalMAvgEndPriceDataReply_List2) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{5, 4}
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetStartPrice() float64 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *KAnd2NIntervalMAvgEndPriceDataReply_List2) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type IntervalMAvgEndPriceDataReply_ListK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
	X2 float64 `protobuf:"fixed64,2,opt,name=x2,proto3" json:"x2,omitempty"`
	X3 float64 `protobuf:"fixed64,3,opt,name=x3,proto3" json:"x3,omitempty"`
	X4 float64 `protobuf:"fixed64,4,opt,name=x4,proto3" json:"x4,omitempty"`
	X5 int64   `protobuf:"varint,5,opt,name=x5,proto3" json:"x5,omitempty"`
}

func (x *IntervalMAvgEndPriceDataReply_ListK) Reset() {
	*x = IntervalMAvgEndPriceDataReply_ListK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMAvgEndPriceDataReply_ListK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMAvgEndPriceDataReply_ListK) ProtoMessage() {}

func (x *IntervalMAvgEndPriceDataReply_ListK) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMAvgEndPriceDataReply_ListK.ProtoReflect.Descriptor instead.
func (*IntervalMAvgEndPriceDataReply_ListK) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{7, 0}
}

func (x *IntervalMAvgEndPriceDataReply_ListK) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_ListK) GetX2() float64 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_ListK) GetX3() float64 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_ListK) GetX4() float64 {
	if x != nil {
		return x.X4
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_ListK) GetX5() int64 {
	if x != nil {
		return x.X5
	}
	return 0
}

type IntervalMAvgEndPriceDataReply_ListMaNMFirst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
}

func (x *IntervalMAvgEndPriceDataReply_ListMaNMFirst) Reset() {
	*x = IntervalMAvgEndPriceDataReply_ListMaNMFirst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMAvgEndPriceDataReply_ListMaNMFirst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMAvgEndPriceDataReply_ListMaNMFirst) ProtoMessage() {}

func (x *IntervalMAvgEndPriceDataReply_ListMaNMFirst) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMAvgEndPriceDataReply_ListMaNMFirst.ProtoReflect.Descriptor instead.
func (*IntervalMAvgEndPriceDataReply_ListMaNMFirst) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{7, 1}
}

func (x *IntervalMAvgEndPriceDataReply_ListMaNMFirst) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

type IntervalMAvgEndPriceDataReply_List2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrice float64 `protobuf:"fixed64,1,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	EndPrice   float64 `protobuf:"fixed64,2,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	StartTime  int64   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64   `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type       string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Status     string  `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Rate       float64 `protobuf:"fixed64,9,opt,name=rate,proto3" json:"rate,omitempty"`
	Action     string  `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *IntervalMAvgEndPriceDataReply_List2) Reset() {
	*x = IntervalMAvgEndPriceDataReply_List2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMAvgEndPriceDataReply_List2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMAvgEndPriceDataReply_List2) ProtoMessage() {}

func (x *IntervalMAvgEndPriceDataReply_List2) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMAvgEndPriceDataReply_List2.ProtoReflect.Descriptor instead.
func (*IntervalMAvgEndPriceDataReply_List2) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{7, 2}
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetStartPrice() float64 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *IntervalMAvgEndPriceDataReply_List2) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type IntervalMMACDDataReply_ListK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
	X2 float64 `protobuf:"fixed64,2,opt,name=x2,proto3" json:"x2,omitempty"`
	X3 float64 `protobuf:"fixed64,3,opt,name=x3,proto3" json:"x3,omitempty"`
	X4 float64 `protobuf:"fixed64,4,opt,name=x4,proto3" json:"x4,omitempty"`
	X5 int64   `protobuf:"varint,5,opt,name=x5,proto3" json:"x5,omitempty"`
	X6 int64   `protobuf:"varint,6,opt,name=x6,proto3" json:"x6,omitempty"`
}

func (x *IntervalMMACDDataReply_ListK) Reset() {
	*x = IntervalMMACDDataReply_ListK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMMACDDataReply_ListK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMMACDDataReply_ListK) ProtoMessage() {}

func (x *IntervalMMACDDataReply_ListK) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMMACDDataReply_ListK.ProtoReflect.Descriptor instead.
func (*IntervalMMACDDataReply_ListK) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{9, 0}
}

func (x *IntervalMMACDDataReply_ListK) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListK) GetX2() float64 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListK) GetX3() float64 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListK) GetX4() float64 {
	if x != nil {
		return x.X4
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListK) GetX5() int64 {
	if x != nil {
		return x.X5
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListK) GetX6() int64 {
	if x != nil {
		return x.X6
	}
	return 0
}

type IntervalMMACDDataReply_ListMacd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1 float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
	X2 float64 `protobuf:"fixed64,2,opt,name=x2,proto3" json:"x2,omitempty"`
	X3 float64 `protobuf:"fixed64,3,opt,name=x3,proto3" json:"x3,omitempty"`
	X4 int64   `protobuf:"varint,4,opt,name=x4,proto3" json:"x4,omitempty"`
}

func (x *IntervalMMACDDataReply_ListMacd) Reset() {
	*x = IntervalMMACDDataReply_ListMacd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMMACDDataReply_ListMacd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMMACDDataReply_ListMacd) ProtoMessage() {}

func (x *IntervalMMACDDataReply_ListMacd) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMMACDDataReply_ListMacd.ProtoReflect.Descriptor instead.
func (*IntervalMMACDDataReply_ListMacd) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{9, 1}
}

func (x *IntervalMMACDDataReply_ListMacd) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListMacd) GetX2() float64 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListMacd) GetX3() float64 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *IntervalMMACDDataReply_ListMacd) GetX4() int64 {
	if x != nil {
		return x.X4
	}
	return 0
}

type IntervalMMACDDataReply_List2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrice float64 `protobuf:"fixed64,1,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	EndPrice   float64 `protobuf:"fixed64,2,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	StartTime  int64   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64   `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type       string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Status     string  `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Rate       float64 `protobuf:"fixed64,9,opt,name=rate,proto3" json:"rate,omitempty"`
	Action     string  `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *IntervalMMACDDataReply_List2) Reset() {
	*x = IntervalMMACDDataReply_List2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMMACDDataReply_List2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMMACDDataReply_List2) ProtoMessage() {}

func (x *IntervalMMACDDataReply_List2) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMMACDDataReply_List2.ProtoReflect.Descriptor instead.
func (*IntervalMMACDDataReply_List2) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{9, 2}
}

func (x *IntervalMMACDDataReply_List2) GetStartPrice() float64 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *IntervalMMACDDataReply_List2) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *IntervalMMACDDataReply_List2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *IntervalMMACDDataReply_List2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *IntervalMMACDDataReply_List2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IntervalMMACDDataReply_List2) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IntervalMMACDDataReply_List2) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *IntervalMMACDDataReply_List2) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type IntervalMKAndMACDDataReply_ListK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X1   float64 `protobuf:"fixed64,1,opt,name=x1,proto3" json:"x1,omitempty"`
	X2   float64 `protobuf:"fixed64,2,opt,name=x2,proto3" json:"x2,omitempty"`
	X3   float64 `protobuf:"fixed64,3,opt,name=x3,proto3" json:"x3,omitempty"`
	X4   float64 `protobuf:"fixed64,4,opt,name=x4,proto3" json:"x4,omitempty"`
	X5   int64   `protobuf:"varint,5,opt,name=x5,proto3" json:"x5,omitempty"`
	X6   int64   `protobuf:"varint,6,opt,name=x6,proto3" json:"x6,omitempty"`
	X31  float64 `protobuf:"fixed64,7,opt,name=x31,proto3" json:"x31,omitempty"`
	X32  float64 `protobuf:"fixed64,8,opt,name=x32,proto3" json:"x32,omitempty"`
	X33  float64 `protobuf:"fixed64,9,opt,name=x33,proto3" json:"x33,omitempty"`
	X34  int64   `protobuf:"varint,10,opt,name=x34,proto3" json:"x34,omitempty"`
	X151 float64 `protobuf:"fixed64,11,opt,name=x151,proto3" json:"x151,omitempty"`
	X152 float64 `protobuf:"fixed64,12,opt,name=x152,proto3" json:"x152,omitempty"`
	X153 float64 `protobuf:"fixed64,13,opt,name=x153,proto3" json:"x153,omitempty"`
	X154 int64   `protobuf:"varint,14,opt,name=x154,proto3" json:"x154,omitempty"`
	X601 float64 `protobuf:"fixed64,15,opt,name=x601,proto3" json:"x601,omitempty"`
	X602 float64 `protobuf:"fixed64,16,opt,name=x602,proto3" json:"x602,omitempty"`
	X603 float64 `protobuf:"fixed64,17,opt,name=x603,proto3" json:"x603,omitempty"`
	X604 int64   `protobuf:"varint,18,opt,name=x604,proto3" json:"x604,omitempty"`
}

func (x *IntervalMKAndMACDDataReply_ListK) Reset() {
	*x = IntervalMKAndMACDDataReply_ListK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMKAndMACDDataReply_ListK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMKAndMACDDataReply_ListK) ProtoMessage() {}

func (x *IntervalMKAndMACDDataReply_ListK) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMKAndMACDDataReply_ListK.ProtoReflect.Descriptor instead.
func (*IntervalMKAndMACDDataReply_ListK) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{11, 0}
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX1() float64 {
	if x != nil {
		return x.X1
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX2() float64 {
	if x != nil {
		return x.X2
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX3() float64 {
	if x != nil {
		return x.X3
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX4() float64 {
	if x != nil {
		return x.X4
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX5() int64 {
	if x != nil {
		return x.X5
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX6() int64 {
	if x != nil {
		return x.X6
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX31() float64 {
	if x != nil {
		return x.X31
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX32() float64 {
	if x != nil {
		return x.X32
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX33() float64 {
	if x != nil {
		return x.X33
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX34() int64 {
	if x != nil {
		return x.X34
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX151() float64 {
	if x != nil {
		return x.X151
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX152() float64 {
	if x != nil {
		return x.X152
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX153() float64 {
	if x != nil {
		return x.X153
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX154() int64 {
	if x != nil {
		return x.X154
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX601() float64 {
	if x != nil {
		return x.X601
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX602() float64 {
	if x != nil {
		return x.X602
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX603() float64 {
	if x != nil {
		return x.X603
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_ListK) GetX604() int64 {
	if x != nil {
		return x.X604
	}
	return 0
}

type IntervalMKAndMACDDataReply_List2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrice float64 `protobuf:"fixed64,1,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	EndPrice   float64 `protobuf:"fixed64,2,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	StartTime  int64   `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int64   `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Type       string  `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Status     string  `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Rate       float64 `protobuf:"fixed64,9,opt,name=rate,proto3" json:"rate,omitempty"`
	Action     string  `protobuf:"bytes,10,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *IntervalMKAndMACDDataReply_List2) Reset() {
	*x = IntervalMKAndMACDDataReply_List2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalMKAndMACDDataReply_List2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalMKAndMACDDataReply_List2) ProtoMessage() {}

func (x *IntervalMKAndMACDDataReply_List2) ProtoReflect() protoreflect.Message {
	mi := &file_api_binancedata_v1_binancedata_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalMKAndMACDDataReply_List2.ProtoReflect.Descriptor instead.
func (*IntervalMKAndMACDDataReply_List2) Descriptor() ([]byte, []int) {
	return file_api_binancedata_v1_binancedata_proto_rawDescGZIP(), []int{11, 1}
}

func (x *IntervalMKAndMACDDataReply_List2) GetStartPrice() float64 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_List2) GetEndPrice() float64 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_List2) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_List2) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_List2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IntervalMKAndMACDDataReply_List2) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IntervalMKAndMACDDataReply_List2) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *IntervalMKAndMACDDataReply_List2) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

var File_api_binancedata_v1_binancedata_proto protoreflect.FileDescriptor

var file_api_binancedata_v1_binancedata_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe4, 0x02, 0x0a, 0x21, 0x58, 0x4e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0xe1, 0x01, 0x0a,
	0x08, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e,
	0x32, 0x12, 0x51, 0x0a, 0x01, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67,
	0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x01, 0x78, 0x1a, 0x3a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0xab, 0x0d, 0x0a, 0x1f, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x58, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x12, 0x64,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x35, 0x4d, 0x35, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x35, 0x6d, 0x35, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x35, 0x4d, 0x35, 0x12, 0x67, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x31, 0x30, 0x4d, 0x35, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67,
	0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x31, 0x30, 0x6d, 0x35, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x31, 0x30, 0x4d, 0x35, 0x12, 0x67, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x35, 0x4d, 0x31, 0x35, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x35, 0x6d, 0x31, 0x35, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x35, 0x4d, 0x31, 0x35, 0x12, 0x6a, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x31, 0x30, 0x4d, 0x31, 0x35, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x31, 0x30, 0x6d, 0x31,
	0x35, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x31, 0x30, 0x4d,
	0x31, 0x35, 0x12, 0x67, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61,
	0x35, 0x4d, 0x36, 0x30, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x35, 0x6d, 0x36, 0x30, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x35, 0x4d, 0x36, 0x30, 0x12, 0x6a, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x31, 0x30, 0x4d, 0x36, 0x30, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x31, 0x30, 0x6d, 0x36, 0x30, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x31, 0x30, 0x4d, 0x36, 0x30, 0x12, 0x5f, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41,
	0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xb8, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x61, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x1a, 0x30, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x35, 0x6d, 0x35, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x1a, 0x31, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x31, 0x30,
	0x6d, 0x35, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x45, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x31, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d,
	0x61, 0x35, 0x6d, 0x31, 0x35, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76,
	0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x32, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x31, 0x30, 0x6d, 0x31, 0x35, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x61, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x31, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x35, 0x6d, 0x36, 0x30, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x1a, 0x32, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x31, 0x30, 0x6d, 0x36, 0x30,
	0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x1a, 0xd7, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x96,
	0x03, 0x0a, 0x25, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x8b, 0x02, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6e, 0x32, 0x12, 0x0e,
	0x0a, 0x02, 0x6d, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6d, 0x31, 0x12, 0x0e,
	0x0a, 0x02, 0x6d, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6d, 0x32, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x5f, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x77, 0x58, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x52, 0x61, 0x74, 0x65, 0x22, 0xea, 0x08, 0x0a, 0x23, 0x4b, 0x41, 0x6e, 0x64,
	0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x5c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x12, 0x74, 0x0a,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x4e, 0x4d, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x41,
	0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67,
	0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x4e, 0x4d, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x4e, 0x4d, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x4e, 0x4d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x4e, 0x4d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x4e, 0x4d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x67, 0x0a, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x63, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x58, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x78, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02,
	0x78, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x78, 0x35, 0x1a, 0x20, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x4e, 0x4d, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x78, 0x31, 0x1a, 0x21, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x4e,
	0x4d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x31, 0x1a, 0x21, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x78, 0x31, 0x1a, 0xd7, 0x01, 0x0a, 0x05, 0x4c,
	0x69, 0x73, 0x74, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6d, 0x12, 0x0c,
	0x0a, 0x01, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xaa, 0x06, 0x0a, 0x1d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76,
	0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x12, 0x6e, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x61, 0x4e, 0x4d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76,
	0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x4e, 0x4d, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x4e, 0x4d, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x32, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x58, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x78, 0x35, 0x1a, 0x20, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x4e, 0x4d, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x31, 0x1a, 0xd7, 0x01,
	0x0a, 0x05, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4d, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x6b, 0x22, 0xba, 0x06, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x4f, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x12, 0x58, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x64, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x64, 0x12, 0x56, 0x0a, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4d, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x32, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x68, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x78, 0x35, 0x12, 0x0e, 0x0a, 0x02, 0x78,
	0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x78, 0x36, 0x1a, 0x4b, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x78, 0x34, 0x1a, 0xd7, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x73,
	0x74, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4b,
	0x41, 0x6e, 0x64, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x6b, 0x22, 0x88, 0x07, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x4b, 0x41, 0x6e, 0x64, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4b, 0x41, 0x6e, 0x64, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x12, 0x5a, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4b, 0x41,
	0x6e, 0x64, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x32, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0xd0, 0x02, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x31, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x32, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x33, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x78, 0x34, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x78, 0x35, 0x12, 0x0e, 0x0a,
	0x02, 0x78, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x78, 0x36, 0x12, 0x10, 0x0a,
	0x03, 0x78, 0x33, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x78, 0x33, 0x31, 0x12,
	0x10, 0x0a, 0x03, 0x78, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x78, 0x33,
	0x32, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x33, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x78, 0x33, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x33, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x78, 0x33, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x31, 0x35, 0x31, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x31, 0x35, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x31, 0x35,
	0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x31, 0x35, 0x32, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x31, 0x35, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x31, 0x35,
	0x33, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x31, 0x35, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x78, 0x31, 0x35, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x36, 0x30, 0x31, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x36, 0x30, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x36, 0x30,
	0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x36, 0x30, 0x32, 0x12, 0x12, 0x0a,
	0x04, 0x78, 0x36, 0x30, 0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x78, 0x36, 0x30,
	0x33, 0x12, 0x12, 0x0a, 0x04, 0x78, 0x36, 0x30, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x78, 0x36, 0x30, 0x34, 0x1a, 0xd7, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0xd9, 0x08, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0xcf, 0x01, 0x0a, 0x1a, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41,
	0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41,
	0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3f, 0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x2f, 0x78, 0x5f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x6d, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0xe1, 0x01, 0x0a, 0x1e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x41, 0x6e, 0x64, 0x32, 0x4e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45,
	0x22, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x6b, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x32, 0x5f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0xba,
	0x01, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41, 0x76, 0x67, 0x45, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x41,
	0x76, 0x67, 0x45, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x9c, 0x01, 0x0a, 0x11,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4d, 0x41,
	0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d,
	0x5f, 0x6d, 0x61, 0x63, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4b, 0x41, 0x6e, 0x64, 0x4d, 0x41, 0x43, 0x44,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x4b, 0x41, 0x6e, 0x64, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x4b, 0x41, 0x6e, 0x64, 0x4d, 0x41, 0x43, 0x44, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x5f, 0x6b, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x6d, 0x61, 0x63, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x39, 0x0a, 0x12, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x50, 0x01, 0x5a, 0x21, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_binancedata_v1_binancedata_proto_rawDescOnce sync.Once
	file_api_binancedata_v1_binancedata_proto_rawDescData = file_api_binancedata_v1_binancedata_proto_rawDesc
)

func file_api_binancedata_v1_binancedata_proto_rawDescGZIP() []byte {
	file_api_binancedata_v1_binancedata_proto_rawDescOnce.Do(func() {
		file_api_binancedata_v1_binancedata_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_binancedata_v1_binancedata_proto_rawDescData)
	})
	return file_api_binancedata_v1_binancedata_proto_rawDescData
}

var file_api_binancedata_v1_binancedata_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_api_binancedata_v1_binancedata_proto_goTypes = []interface{}{
	(*PullBinanceDataRequest)(nil),                             // 0: api.binancedata.v1.PullBinanceDataRequest
	(*PullBinanceDataReply)(nil),                               // 1: api.binancedata.v1.PullBinanceDataReply
	(*XNIntervalMAvgEndPriceDataRequest)(nil),                  // 2: api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest
	(*XNIntervalMAvgEndPriceDataReply)(nil),                    // 3: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply
	(*KAnd2NIntervalMAvgEndPriceDataRequest)(nil),              // 4: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataRequest
	(*KAnd2NIntervalMAvgEndPriceDataReply)(nil),                // 5: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply
	(*IntervalMAvgEndPriceDataRequest)(nil),                    // 6: api.binancedata.v1.IntervalMAvgEndPriceDataRequest
	(*IntervalMAvgEndPriceDataReply)(nil),                      // 7: api.binancedata.v1.IntervalMAvgEndPriceDataReply
	(*IntervalMMACDDataRequest)(nil),                           // 8: api.binancedata.v1.IntervalMMACDDataRequest
	(*IntervalMMACDDataReply)(nil),                             // 9: api.binancedata.v1.IntervalMMACDDataReply
	(*IntervalMKAndMACDDataRequest)(nil),                       // 10: api.binancedata.v1.IntervalMKAndMACDDataRequest
	(*IntervalMKAndMACDDataReply)(nil),                         // 11: api.binancedata.v1.IntervalMKAndMACDDataReply
	(*XNIntervalMAvgEndPriceDataRequest_SendBody)(nil),         // 12: api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest.SendBody
	(*XNIntervalMAvgEndPriceDataRequest_SendBody_List)(nil),    // 13: api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest.SendBody.List
	(*XNIntervalMAvgEndPriceDataReply_ListK)(nil),              // 14: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_k
	(*XNIntervalMAvgEndPriceDataReply_ListMa5M5)(nil),          // 15: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma5m5
	(*XNIntervalMAvgEndPriceDataReply_ListMa10M5)(nil),         // 16: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma10m5
	(*XNIntervalMAvgEndPriceDataReply_ListMa5M15)(nil),         // 17: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma5m15
	(*XNIntervalMAvgEndPriceDataReply_ListMa10M15)(nil),        // 18: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma10m15
	(*XNIntervalMAvgEndPriceDataReply_ListMa5M60)(nil),         // 19: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma5m60
	(*XNIntervalMAvgEndPriceDataReply_ListMa10M60)(nil),        // 20: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma10m60
	(*XNIntervalMAvgEndPriceDataReply_List2)(nil),              // 21: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List2
	(*KAnd2NIntervalMAvgEndPriceDataRequest_SendBody)(nil),     // 22: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataRequest.SendBody
	(*KAnd2NIntervalMAvgEndPriceDataReply_ListK)(nil),          // 23: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_k
	(*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst)(nil),  // 24: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_maNMFirst
	(*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond)(nil), // 25: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_maNMSecond
	(*KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround)(nil), // 26: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_backGround
	(*KAnd2NIntervalMAvgEndPriceDataReply_List2)(nil),          // 27: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List2
	(*IntervalMAvgEndPriceDataReply_ListK)(nil),                // 28: api.binancedata.v1.IntervalMAvgEndPriceDataReply.List_k
	(*IntervalMAvgEndPriceDataReply_ListMaNMFirst)(nil),        // 29: api.binancedata.v1.IntervalMAvgEndPriceDataReply.List_maNMFirst
	(*IntervalMAvgEndPriceDataReply_List2)(nil),                // 30: api.binancedata.v1.IntervalMAvgEndPriceDataReply.List2
	(*IntervalMMACDDataReply_ListK)(nil),                       // 31: api.binancedata.v1.IntervalMMACDDataReply.List_k
	(*IntervalMMACDDataReply_ListMacd)(nil),                    // 32: api.binancedata.v1.IntervalMMACDDataReply.List_macd
	(*IntervalMMACDDataReply_List2)(nil),                       // 33: api.binancedata.v1.IntervalMMACDDataReply.List2
	(*IntervalMKAndMACDDataReply_ListK)(nil),                   // 34: api.binancedata.v1.IntervalMKAndMACDDataReply.List_k
	(*IntervalMKAndMACDDataReply_List2)(nil),                   // 35: api.binancedata.v1.IntervalMKAndMACDDataReply.List2
}
var file_api_binancedata_v1_binancedata_proto_depIdxs = []int32{
	12, // 0: api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest.send_body:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest.SendBody
	14, // 1: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.dataListK:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_k
	15, // 2: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.dataListMa5M5:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma5m5
	16, // 3: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.dataListMa10M5:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma10m5
	17, // 4: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.dataListMa5M15:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma5m15
	18, // 5: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.dataListMa10M15:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma10m15
	19, // 6: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.dataListMa5M60:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma5m60
	20, // 7: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.dataListMa10M60:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List_ma10m60
	21, // 8: api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.operationData:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply.List2
	22, // 9: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataRequest.send_body:type_name -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataRequest.SendBody
	23, // 10: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.dataListK:type_name -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_k
	24, // 11: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.dataListMaNMFirst:type_name -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_maNMFirst
	25, // 12: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.dataListMaNMSecond:type_name -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_maNMSecond
	26, // 13: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.backGround:type_name -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List_backGround
	27, // 14: api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.operationData:type_name -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply.List2
	28, // 15: api.binancedata.v1.IntervalMAvgEndPriceDataReply.dataListK:type_name -> api.binancedata.v1.IntervalMAvgEndPriceDataReply.List_k
	29, // 16: api.binancedata.v1.IntervalMAvgEndPriceDataReply.dataListMaNMFirst:type_name -> api.binancedata.v1.IntervalMAvgEndPriceDataReply.List_maNMFirst
	30, // 17: api.binancedata.v1.IntervalMAvgEndPriceDataReply.operationData:type_name -> api.binancedata.v1.IntervalMAvgEndPriceDataReply.List2
	31, // 18: api.binancedata.v1.IntervalMMACDDataReply.dataListK:type_name -> api.binancedata.v1.IntervalMMACDDataReply.List_k
	32, // 19: api.binancedata.v1.IntervalMMACDDataReply.dataListMacd:type_name -> api.binancedata.v1.IntervalMMACDDataReply.List_macd
	33, // 20: api.binancedata.v1.IntervalMMACDDataReply.operationData:type_name -> api.binancedata.v1.IntervalMMACDDataReply.List2
	34, // 21: api.binancedata.v1.IntervalMKAndMACDDataReply.dataListK:type_name -> api.binancedata.v1.IntervalMKAndMACDDataReply.List_k
	35, // 22: api.binancedata.v1.IntervalMKAndMACDDataReply.operationData:type_name -> api.binancedata.v1.IntervalMKAndMACDDataReply.List2
	13, // 23: api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest.SendBody.x:type_name -> api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest.SendBody.List
	2,  // 24: api.binancedata.v1.BinanceData.XNIntervalMAvgEndPriceData:input_type -> api.binancedata.v1.XNIntervalMAvgEndPriceDataRequest
	4,  // 25: api.binancedata.v1.BinanceData.KAnd2NIntervalMAvgEndPriceData:input_type -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataRequest
	0,  // 26: api.binancedata.v1.BinanceData.PullBinanceData:input_type -> api.binancedata.v1.PullBinanceDataRequest
	6,  // 27: api.binancedata.v1.BinanceData.IntervalMAvgEndPriceData:input_type -> api.binancedata.v1.IntervalMAvgEndPriceDataRequest
	8,  // 28: api.binancedata.v1.BinanceData.IntervalMMACDData:input_type -> api.binancedata.v1.IntervalMMACDDataRequest
	10, // 29: api.binancedata.v1.BinanceData.IntervalMKAndMACDData:input_type -> api.binancedata.v1.IntervalMKAndMACDDataRequest
	3,  // 30: api.binancedata.v1.BinanceData.XNIntervalMAvgEndPriceData:output_type -> api.binancedata.v1.XNIntervalMAvgEndPriceDataReply
	5,  // 31: api.binancedata.v1.BinanceData.KAnd2NIntervalMAvgEndPriceData:output_type -> api.binancedata.v1.KAnd2NIntervalMAvgEndPriceDataReply
	1,  // 32: api.binancedata.v1.BinanceData.PullBinanceData:output_type -> api.binancedata.v1.PullBinanceDataReply
	7,  // 33: api.binancedata.v1.BinanceData.IntervalMAvgEndPriceData:output_type -> api.binancedata.v1.IntervalMAvgEndPriceDataReply
	9,  // 34: api.binancedata.v1.BinanceData.IntervalMMACDData:output_type -> api.binancedata.v1.IntervalMMACDDataReply
	11, // 35: api.binancedata.v1.BinanceData.IntervalMKAndMACDData:output_type -> api.binancedata.v1.IntervalMKAndMACDDataReply
	30, // [30:36] is the sub-list for method output_type
	24, // [24:30] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_api_binancedata_v1_binancedata_proto_init() }
func file_api_binancedata_v1_binancedata_proto_init() {
	if File_api_binancedata_v1_binancedata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_binancedata_v1_binancedata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBinanceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBinanceDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMAvgEndPriceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMAvgEndPriceDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMMACDDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMMACDDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMKAndMACDDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMKAndMACDDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataRequest_SendBody_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_ListK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_ListMa5M5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_ListMa10M5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_ListMa5M15); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_ListMa10M15); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_ListMa5M60); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_ListMa10M60); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNIntervalMAvgEndPriceDataReply_List2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataReply_ListK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KAnd2NIntervalMAvgEndPriceDataReply_List2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMAvgEndPriceDataReply_ListK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMAvgEndPriceDataReply_ListMaNMFirst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMAvgEndPriceDataReply_List2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMMACDDataReply_ListK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMMACDDataReply_ListMacd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMMACDDataReply_List2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMKAndMACDDataReply_ListK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binancedata_v1_binancedata_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalMKAndMACDDataReply_List2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_binancedata_v1_binancedata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_binancedata_v1_binancedata_proto_goTypes,
		DependencyIndexes: file_api_binancedata_v1_binancedata_proto_depIdxs,
		MessageInfos:      file_api_binancedata_v1_binancedata_proto_msgTypes,
	}.Build()
	File_api_binancedata_v1_binancedata_proto = out.File
	file_api_binancedata_v1_binancedata_proto_rawDesc = nil
	file_api_binancedata_v1_binancedata_proto_goTypes = nil
	file_api_binancedata_v1_binancedata_proto_depIdxs = nil
}
