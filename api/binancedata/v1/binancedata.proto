syntax = "proto3";

package api.binancedata.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "binancedata/api/binancedata/v1;v1";
option java_multiple_files = true;
option java_package = "api.binancedata.v1";

service BinanceData {
	rpc XNIntervalMAvgEndPriceData (XNIntervalMAvgEndPriceDataRequest) returns (XNIntervalMAvgEndPriceDataReply) {
		option (google.api.http) = {
			post: "/api/binancedata/x_n_interval_m_avg_end_price_data"
			body: "send_body"
		};
	};

	rpc KAnd2NIntervalMAvgEndPriceData (KAnd2NIntervalMAvgEndPriceDataRequest) returns (KAnd2NIntervalMAvgEndPriceDataReply) {
		option (google.api.http) = {
			post: "/api/binancedata/k_and_2_n_interval_m_avg_end_price_data"
			body: "send_body"
		};
	};

	rpc PullBinanceData (PullBinanceDataRequest) returns (PullBinanceDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/pull"
		};
	};

	rpc IntervalMAvgEndPriceData (IntervalMAvgEndPriceDataRequest) returns (IntervalMAvgEndPriceDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/interval_m_avg_end_price_data"
		};
	};

	rpc IntervalMMACDData (IntervalMMACDDataRequest) returns (IntervalMMACDDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/interval_m_macd_data"
		};
	};

	rpc IntervalMKAndMACDData (IntervalMKAndMACDDataRequest) returns (IntervalMKAndMACDDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/interval_m_k_and_macd_data"
		};
	};

	rpc AreaPointIntervalMAvgEndPriceData (AreaPointIntervalMAvgEndPriceDataRequest) returns (AreaPointIntervalMAvgEndPriceDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/area_point_interval_m_avg_end_price_data"
		};
	};

	rpc IntervalMAvgEndPriceMacdAndAtrData (IntervalMAvgEndPriceMacdAndAtrDataRequest) returns (IntervalMAvgEndPriceMacdAndAtrDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/interval_m_avg_end_price_macd_and_atr_data"
		};
	};

	rpc OrderAreaPoint (OrderAreaPointRequest) returns (OrderAreaPointReply) {
		option (google.api.http) = {
			get: "/api/binancedata/order_area_point"
		};
	};
}

message PullBinanceDataRequest {
	string start = 1;
	string coin = 2;
}

message PullBinanceDataReply {}

message XNIntervalMAvgEndPriceDataRequest {
	message SendBody{
		string start = 1;
		string end = 2;
		int32 n1 = 3;
		int32 n2 = 4;
		repeated List x = 5;
		message List {
			int64 m = 1;
			int64 n = 2;
			string method = 3;
		}
	}

	SendBody send_body = 1;
}

message XNIntervalMAvgEndPriceDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double start_price = 1;
		double end_price = 2;
		double top_price = 3;
		double low_price = 4;
		double avg_end_price = 5;
		int64 time = 6;
	}

	repeated List_ma5m5 dataListMa5M5 = 6;
	message List_ma5m5 {
		double avg_end_price = 5;
	}

	repeated List_ma10m5 dataListMa10M5 = 7;
	message List_ma10m5 {
		double avg_end_price = 5;
	}

	repeated List_ma5m15 dataListMa5M15 = 8;
	message List_ma5m15 {
		double avg_end_price = 5;
	}

	repeated List_ma10m15 dataListMa10M15 = 9;
	message List_ma10m15 {
		double avg_end_price = 5;
	}

	repeated List_ma5m60 dataListMa5M60 = 10;
	message List_ma5m60 {
		double avg_end_price = 5;
	}

	repeated List_ma10m60 dataListMa10M60 = 11;
	message List_ma10m60 {
		double avg_end_price = 5;
	}


	repeated List2 operationData = 2;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 3;
	string operationWinRate = 4;
	string operationWinAmount = 5;

}

message KAnd2NIntervalMAvgEndPriceDataRequest {
	message SendBody{
		string start = 1;
		string end = 2;
		int32 n1 = 3;
		int32 n2 = 4;
		int32 m1 = 5;
		int32 m2 = 6;
		double top_x = 7;
		double low_x = 8;
		double fee = 9;
		int32 close_condition = 10;
		double close_condition2_rate = 11;
	}

	SendBody send_body = 1;
}

message KAnd2NIntervalMAvgEndPriceDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
	}

	repeated List_maNMFirst dataListMaNMFirst = 2;
	message List_maNMFirst{
		double x1 = 1;
	}

	repeated List_maNMSecond dataListMaNMSecond = 3;
	message List_maNMSecond{
		double x1 = 1;
	}

	repeated List_backGround backGround = 4;
	message List_backGround{
		string x1 = 1;
	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 7;
	string operationWinRate = 8;
	string operationWinAmount = 9;
}

message OrderAreaPointRequest {
	string test = 1;
	string start = 2;
	int64 user = 3;
}

message OrderAreaPointReply {}

message AreaPointIntervalMAvgEndPriceDataRequest {
	string start = 1;
	string end = 2;
	int32 m = 3;
	int32 n = 4;
	double point_first = 5;
	double point_interval = 6;
	string coin_type = 7;
}

message AreaPointIntervalMAvgEndPriceDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
		int64 x6 = 6;
	}

	repeated List_maNMFirst dataListMaNMFirst = 2;
	message List_maNMFirst{
		double x1 = 1;
	}

	repeated List_sub_point dataListSubPoint = 8;
	message List_sub_point{
		double x1 = 1;
	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 3;
	string operationWinRate = 4;
	string operationWinAmount = 5;
}


message IntervalMAvgEndPriceMacdAndAtrDataRequest {
	string start = 1;
	string end = 2;
	int32 m = 3;
	double max1 = 5;
	double max2 = 6;
	double low1 = 7;
	double low2 = 8;
	int32 atr1N = 9;
	int32 atr2N = 10;
	string coin_type = 11;
}

message IntervalMAvgEndPriceMacdAndAtrDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
		int64 x6 = 6;

		double xc1 = 11;
		double xc2 = 12;
		double xc3 = 13;
		int64 xc4 = 14;

	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		int64 tag = 10;

		double last_macd = 12;
		double top_price = 13;
		double low_price = 19;
		double macd = 14;

		double lowKLowPrice = 16;
		double lowMacd = 15;
		double maxKTopPrice = 17;
		double maxMacd = 18;

		string close_status = 20;
		double close_price_win = 21;
		double close_price_lost = 22;
	}

	int64 operationOrderTotal = 3;
	string operationWinRate = 4;
	string operationWinAmount = 5;
}

message IntervalMAvgEndPriceDataRequest {
	string start = 1;
	string end = 2;
	int32 m = 3;
	int32 n = 4;
	double fee = 5;
	double target_close_rate = 6;
}

message IntervalMAvgEndPriceDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
	}

	repeated List_maNMFirst dataListMaNMFirst = 2;
	message List_maNMFirst{
		double x1 = 1;
	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 3;
	string operationWinRate = 4;
	string operationWinAmount = 5;
}

message IntervalMMACDDataRequest {
	string start = 1;
	string end = 2;
	int32 m = 3;
	int32 n = 4;
	int32 k = 5;
}

message IntervalMMACDDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
		int64 x6 = 6;
	}

	repeated List_macd dataListMacd = 2;
	message List_macd{
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		int64 x4 = 4;
	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 3;
	string operationWinRate = 4;
	string operationWinAmount = 5;
}


message IntervalMKAndMACDDataRequest {
	string start = 1;
	string end = 2;
	int32 m = 3;
	int32 n = 4;
	int32 k = 5;
}

message IntervalMKAndMACDDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
		int64 x6 = 6;

		double x151 = 11;
		double x152 = 12;
		double x153 = 13;
		int64 x154 = 14;
	}

	repeated List_k_macd3 dataListKMacd3 = 2;
	message List_k_macd3 {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
		int64 x6 = 6;

		double x31 = 7;
		double x32 = 8;
		double x33 = 9;
		int64 x34 = 10;
	}

	repeated List_k_macd60 dataListKMacd60 = 3;
	message List_k_macd60 {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
		int64 x6 = 6;

		double x601 = 15;
		double x602 = 16;
		double x603 = 17;
		int64 x604 = 18;
	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;

		repeated ListMacd3 macd3Data = 11;
		message ListMacd3 {
			double x31 = 7;
			double x32 = 8;
			double x33 = 9;
			int64 x34 = 10;
		}

		repeated ListMacd macdData = 12;
		message ListMacd {
			double x31 = 7;
			double x32 = 8;
			double x33 = 9;
			int64 x34 = 10;
		}

		repeated ListMacd60 macd60Data = 13;
		message ListMacd60 {
			double x31 = 7;
			double x32 = 8;
			double x33 = 9;
			int64 x34 = 10;
		}
	}

	int64 operationOrderTotal = 4;
	string operationWinRate = 5;
	string operationWinAmount = 7;
}