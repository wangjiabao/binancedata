syntax = "proto3";

package api.binancedata.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "binancedata/api/binancedata/v1;v1";
option java_multiple_files = true;
option java_package = "api.binancedata.v1";

service BinanceData {
	rpc XNIntervalMAvgEndPriceData (XNIntervalMAvgEndPriceDataRequest) returns (XNIntervalMAvgEndPriceDataReply) {
		option (google.api.http) = {
			post: "/api/binancedata/x_n_interval_m_avg_end_price_data"
			body: "send_body"
		};
	};

	rpc KAnd2NIntervalMAvgEndPriceData (KAnd2NIntervalMAvgEndPriceDataRequest) returns (KAnd2NIntervalMAvgEndPriceDataReply) {
		option (google.api.http) = {
			post: "/api/binancedata/k_and_2_n_interval_m_avg_end_price_data"
			body: "send_body"
		};
	};

	rpc PullBinanceData (PullBinanceDataRequest) returns (PullBinanceDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/pull"
		};
	};

	rpc IntervalMAvgEndPriceData (IntervalMAvgEndPriceDataRequest) returns (IntervalMAvgEndPriceDataReply) {
		option (google.api.http) = {
			get: "/api/binancedata/interval_m_avg_end_price_data"
		};
	};
}

message PullBinanceDataRequest {
	string start = 1;
}

message PullBinanceDataReply {}

message XNIntervalMAvgEndPriceDataRequest {
	message SendBody{
		string start = 1;
		string end = 2;
		int32 n1 = 3;
		int32 n2 = 4;
		repeated List x = 5;
		message List {
			int64 m = 1;
			int64 n = 2;
			string method = 3;
		}
	}

	SendBody send_body = 1;
}

message XNIntervalMAvgEndPriceDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double start_price = 1;
		double end_price = 2;
		double top_price = 3;
		double low_price = 4;
		double avg_end_price = 5;
		int64 time = 6;
	}

	repeated List_ma5m5 dataListMa5M5 = 6;
	message List_ma5m5 {
		double avg_end_price = 5;
	}

	repeated List_ma10m5 dataListMa10M5 = 7;
	message List_ma10m5 {
		double avg_end_price = 5;
	}

	repeated List_ma5m15 dataListMa5M15 = 8;
	message List_ma5m15 {
		double avg_end_price = 5;
	}

	repeated List_ma10m15 dataListMa10M15 = 9;
	message List_ma10m15 {
		double avg_end_price = 5;
	}

	repeated List_ma5m60 dataListMa5M60 = 10;
	message List_ma5m60 {
		double avg_end_price = 5;
	}

	repeated List_ma10m60 dataListMa10M60 = 11;
	message List_ma10m60 {
		double avg_end_price = 5;
	}


	repeated List2 operationData = 2;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 3;
	string operationWinRate = 4;
	string operationWinAmount = 5;

}

message KAnd2NIntervalMAvgEndPriceDataRequest {
	message SendBody{
		string start = 1;
		string end = 2;
		int32 n1 = 3;
		int32 n2 = 4;
		int32 m1 = 5;
		int32 m2 = 6;
		double top_x = 7;
		double low_x = 8;
		double fee = 9;
		int32 close_condition = 10;
		double close_condition2_rate = 11;
	}

	SendBody send_body = 1;
}

message KAnd2NIntervalMAvgEndPriceDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
	}

	repeated List_maNMFirst dataListMaNMFirst = 2;
	message List_maNMFirst{
		double x1 = 1;
	}

	repeated List_maNMSecond dataListMaNMSecond = 3;
	message List_maNMSecond{
		double x1 = 1;
	}

	repeated List_backGround backGround = 4;
	message List_backGround{
		string x1 = 1;
	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 7;
	string operationWinRate = 8;
	string operationWinAmount = 9;
}

message IntervalMAvgEndPriceDataRequest {
	string start = 1;
	string end = 2;
	int32 m = 3;
	int32 n = 4;
	double fee = 5;
	double target_close_rate = 6;
}

message IntervalMAvgEndPriceDataReply {
	repeated List_k dataListK = 1;
	message List_k {
		double x1 = 1;
		double x2 = 2;
		double x3 = 3;
		double x4 = 4;
		int64 x5 = 5;
	}

	repeated List_maNMFirst dataListMaNMFirst = 2;
	message List_maNMFirst{
		double x1 = 1;
	}

	repeated List2 operationData = 6;
	message List2 {
		double start_price = 1;
		double end_price = 2;
		int64 start_time = 3;
		int64 end_time = 6;
		string type = 7;
		string status = 8;
		double rate = 9;
		string action = 10;
	}

	int64 operationOrderTotal = 3;
	string operationWinRate = 4;
	string operationWinAmount = 5;
}