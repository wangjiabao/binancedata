// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/binancedata/v1/binancedata.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinancedataClient is the client API for Binancedata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinancedataClient interface {
	DownloadBinancedata(ctx context.Context, in *DownloadBinancedataRequest, opts ...grpc.CallOption) (*DownloadBinancedataReply, error)
}

type binancedataClient struct {
	cc grpc.ClientConnInterface
}

func NewBinancedataClient(cc grpc.ClientConnInterface) BinancedataClient {
	return &binancedataClient{cc}
}

func (c *binancedataClient) DownloadBinancedata(ctx context.Context, in *DownloadBinancedataRequest, opts ...grpc.CallOption) (*DownloadBinancedataReply, error) {
	out := new(DownloadBinancedataReply)
	err := c.cc.Invoke(ctx, "/api.binancedata.v1.Binancedata/DownloadBinancedata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinancedataServer is the server API for Binancedata service.
// All implementations must embed UnimplementedBinancedataServer
// for forward compatibility
type BinancedataServer interface {
	DownloadBinancedata(context.Context, *DownloadBinancedataRequest) (*DownloadBinancedataReply, error)
	mustEmbedUnimplementedBinancedataServer()
}

// UnimplementedBinancedataServer must be embedded to have forward compatible implementations.
type UnimplementedBinancedataServer struct {
}

func (UnimplementedBinancedataServer) DownloadBinancedata(context.Context, *DownloadBinancedataRequest) (*DownloadBinancedataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadBinancedata not implemented")
}
func (UnimplementedBinancedataServer) mustEmbedUnimplementedBinancedataServer() {}

// UnsafeBinancedataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinancedataServer will
// result in compilation errors.
type UnsafeBinancedataServer interface {
	mustEmbedUnimplementedBinancedataServer()
}

func RegisterBinancedataServer(s grpc.ServiceRegistrar, srv BinancedataServer) {
	s.RegisterService(&Binancedata_ServiceDesc, srv)
}

func _Binancedata_DownloadBinancedata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadBinancedataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinancedataServer).DownloadBinancedata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.binancedata.v1.Binancedata/DownloadBinancedata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinancedataServer).DownloadBinancedata(ctx, req.(*DownloadBinancedataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Binancedata_ServiceDesc is the grpc.ServiceDesc for Binancedata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Binancedata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.binancedata.v1.Binancedata",
	HandlerType: (*BinancedataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadBinancedata",
			Handler:    _Binancedata_DownloadBinancedata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/binancedata/v1/binancedata.proto",
}
