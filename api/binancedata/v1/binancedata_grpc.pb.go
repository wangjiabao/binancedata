// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: api/binancedata/v1/binancedata.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinanceDataClient is the client API for BinanceData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinanceDataClient interface {
	XNIntervalMAvgEndPriceData(ctx context.Context, in *XNIntervalMAvgEndPriceDataRequest, opts ...grpc.CallOption) (*XNIntervalMAvgEndPriceDataReply, error)
	KAnd2NIntervalMAvgEndPriceData(ctx context.Context, in *KAnd2NIntervalMAvgEndPriceDataRequest, opts ...grpc.CallOption) (*KAnd2NIntervalMAvgEndPriceDataReply, error)
	PullBinanceData(ctx context.Context, in *PullBinanceDataRequest, opts ...grpc.CallOption) (*PullBinanceDataReply, error)
	IntervalMAvgEndPriceData(ctx context.Context, in *IntervalMAvgEndPriceDataRequest, opts ...grpc.CallOption) (*IntervalMAvgEndPriceDataReply, error)
	IntervalMMACDData(ctx context.Context, in *IntervalMMACDDataRequest, opts ...grpc.CallOption) (*IntervalMMACDDataReply, error)
}

type binanceDataClient struct {
	cc grpc.ClientConnInterface
}

func NewBinanceDataClient(cc grpc.ClientConnInterface) BinanceDataClient {
	return &binanceDataClient{cc}
}

func (c *binanceDataClient) XNIntervalMAvgEndPriceData(ctx context.Context, in *XNIntervalMAvgEndPriceDataRequest, opts ...grpc.CallOption) (*XNIntervalMAvgEndPriceDataReply, error) {
	out := new(XNIntervalMAvgEndPriceDataReply)
	err := c.cc.Invoke(ctx, "/api.binancedata.v1.BinanceData/XNIntervalMAvgEndPriceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceDataClient) KAnd2NIntervalMAvgEndPriceData(ctx context.Context, in *KAnd2NIntervalMAvgEndPriceDataRequest, opts ...grpc.CallOption) (*KAnd2NIntervalMAvgEndPriceDataReply, error) {
	out := new(KAnd2NIntervalMAvgEndPriceDataReply)
	err := c.cc.Invoke(ctx, "/api.binancedata.v1.BinanceData/KAnd2NIntervalMAvgEndPriceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceDataClient) PullBinanceData(ctx context.Context, in *PullBinanceDataRequest, opts ...grpc.CallOption) (*PullBinanceDataReply, error) {
	out := new(PullBinanceDataReply)
	err := c.cc.Invoke(ctx, "/api.binancedata.v1.BinanceData/PullBinanceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceDataClient) IntervalMAvgEndPriceData(ctx context.Context, in *IntervalMAvgEndPriceDataRequest, opts ...grpc.CallOption) (*IntervalMAvgEndPriceDataReply, error) {
	out := new(IntervalMAvgEndPriceDataReply)
	err := c.cc.Invoke(ctx, "/api.binancedata.v1.BinanceData/IntervalMAvgEndPriceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binanceDataClient) IntervalMMACDData(ctx context.Context, in *IntervalMMACDDataRequest, opts ...grpc.CallOption) (*IntervalMMACDDataReply, error) {
	out := new(IntervalMMACDDataReply)
	err := c.cc.Invoke(ctx, "/api.binancedata.v1.BinanceData/IntervalMMACDData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinanceDataServer is the server API for BinanceData service.
// All implementations must embed UnimplementedBinanceDataServer
// for forward compatibility
type BinanceDataServer interface {
	XNIntervalMAvgEndPriceData(context.Context, *XNIntervalMAvgEndPriceDataRequest) (*XNIntervalMAvgEndPriceDataReply, error)
	KAnd2NIntervalMAvgEndPriceData(context.Context, *KAnd2NIntervalMAvgEndPriceDataRequest) (*KAnd2NIntervalMAvgEndPriceDataReply, error)
	PullBinanceData(context.Context, *PullBinanceDataRequest) (*PullBinanceDataReply, error)
	IntervalMAvgEndPriceData(context.Context, *IntervalMAvgEndPriceDataRequest) (*IntervalMAvgEndPriceDataReply, error)
	IntervalMMACDData(context.Context, *IntervalMMACDDataRequest) (*IntervalMMACDDataReply, error)
	mustEmbedUnimplementedBinanceDataServer()
}

// UnimplementedBinanceDataServer must be embedded to have forward compatible implementations.
type UnimplementedBinanceDataServer struct {
}

func (UnimplementedBinanceDataServer) XNIntervalMAvgEndPriceData(context.Context, *XNIntervalMAvgEndPriceDataRequest) (*XNIntervalMAvgEndPriceDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XNIntervalMAvgEndPriceData not implemented")
}
func (UnimplementedBinanceDataServer) KAnd2NIntervalMAvgEndPriceData(context.Context, *KAnd2NIntervalMAvgEndPriceDataRequest) (*KAnd2NIntervalMAvgEndPriceDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KAnd2NIntervalMAvgEndPriceData not implemented")
}
func (UnimplementedBinanceDataServer) PullBinanceData(context.Context, *PullBinanceDataRequest) (*PullBinanceDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullBinanceData not implemented")
}
func (UnimplementedBinanceDataServer) IntervalMAvgEndPriceData(context.Context, *IntervalMAvgEndPriceDataRequest) (*IntervalMAvgEndPriceDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntervalMAvgEndPriceData not implemented")
}
func (UnimplementedBinanceDataServer) IntervalMMACDData(context.Context, *IntervalMMACDDataRequest) (*IntervalMMACDDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntervalMMACDData not implemented")
}
func (UnimplementedBinanceDataServer) mustEmbedUnimplementedBinanceDataServer() {}

// UnsafeBinanceDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinanceDataServer will
// result in compilation errors.
type UnsafeBinanceDataServer interface {
	mustEmbedUnimplementedBinanceDataServer()
}

func RegisterBinanceDataServer(s grpc.ServiceRegistrar, srv BinanceDataServer) {
	s.RegisterService(&BinanceData_ServiceDesc, srv)
}

func _BinanceData_XNIntervalMAvgEndPriceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XNIntervalMAvgEndPriceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceDataServer).XNIntervalMAvgEndPriceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.binancedata.v1.BinanceData/XNIntervalMAvgEndPriceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceDataServer).XNIntervalMAvgEndPriceData(ctx, req.(*XNIntervalMAvgEndPriceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceData_KAnd2NIntervalMAvgEndPriceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KAnd2NIntervalMAvgEndPriceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceDataServer).KAnd2NIntervalMAvgEndPriceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.binancedata.v1.BinanceData/KAnd2NIntervalMAvgEndPriceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceDataServer).KAnd2NIntervalMAvgEndPriceData(ctx, req.(*KAnd2NIntervalMAvgEndPriceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceData_PullBinanceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullBinanceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceDataServer).PullBinanceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.binancedata.v1.BinanceData/PullBinanceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceDataServer).PullBinanceData(ctx, req.(*PullBinanceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceData_IntervalMAvgEndPriceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalMAvgEndPriceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceDataServer).IntervalMAvgEndPriceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.binancedata.v1.BinanceData/IntervalMAvgEndPriceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceDataServer).IntervalMAvgEndPriceData(ctx, req.(*IntervalMAvgEndPriceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinanceData_IntervalMMACDData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntervalMMACDDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinanceDataServer).IntervalMMACDData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.binancedata.v1.BinanceData/IntervalMMACDData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinanceDataServer).IntervalMMACDData(ctx, req.(*IntervalMMACDDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinanceData_ServiceDesc is the grpc.ServiceDesc for BinanceData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinanceData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.binancedata.v1.BinanceData",
	HandlerType: (*BinanceDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "XNIntervalMAvgEndPriceData",
			Handler:    _BinanceData_XNIntervalMAvgEndPriceData_Handler,
		},
		{
			MethodName: "KAnd2NIntervalMAvgEndPriceData",
			Handler:    _BinanceData_KAnd2NIntervalMAvgEndPriceData_Handler,
		},
		{
			MethodName: "PullBinanceData",
			Handler:    _BinanceData_PullBinanceData_Handler,
		},
		{
			MethodName: "IntervalMAvgEndPriceData",
			Handler:    _BinanceData_IntervalMAvgEndPriceData_Handler,
		},
		{
			MethodName: "IntervalMMACDData",
			Handler:    _BinanceData_IntervalMMACDData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/binancedata/v1/binancedata.proto",
}
