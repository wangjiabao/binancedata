// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.7
// source: api/binancedata/v1/binancedata.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBinancedataDownloadBinancedata = "/api.binancedata.v1.Binancedata/DownloadBinancedata"

type BinancedataHTTPServer interface {
	DownloadBinancedata(context.Context, *DownloadBinancedataRequest) (*DownloadBinancedataReply, error)
}

func RegisterBinancedataHTTPServer(s *http.Server, srv BinancedataHTTPServer) {
	r := s.Route("/")
	r.GET("/api/binancedata/download", _Binancedata_DownloadBinancedata0_HTTP_Handler(srv))
}

func _Binancedata_DownloadBinancedata0_HTTP_Handler(srv BinancedataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DownloadBinancedataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinancedataDownloadBinancedata)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DownloadBinancedata(ctx, req.(*DownloadBinancedataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DownloadBinancedataReply)
		return ctx.Result(200, reply)
	}
}

type BinancedataHTTPClient interface {
	DownloadBinancedata(ctx context.Context, req *DownloadBinancedataRequest, opts ...http.CallOption) (rsp *DownloadBinancedataReply, err error)
}

type BinancedataHTTPClientImpl struct {
	cc *http.Client
}

func NewBinancedataHTTPClient(client *http.Client) BinancedataHTTPClient {
	return &BinancedataHTTPClientImpl{client}
}

func (c *BinancedataHTTPClientImpl) DownloadBinancedata(ctx context.Context, in *DownloadBinancedataRequest, opts ...http.CallOption) (*DownloadBinancedataReply, error) {
	var out DownloadBinancedataReply
	pattern := "/api/binancedata/download"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinancedataDownloadBinancedata))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
