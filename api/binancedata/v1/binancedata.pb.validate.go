// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/binancedata/v1/binancedata.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PullBinanceDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PullBinanceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PullBinanceDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PullBinanceDataRequestMultiError, or nil if none found.
func (m *PullBinanceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PullBinanceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for Coin

	if len(errors) > 0 {
		return PullBinanceDataRequestMultiError(errors)
	}

	return nil
}

// PullBinanceDataRequestMultiError is an error wrapping multiple validation
// errors returned by PullBinanceDataRequest.ValidateAll() if the designated
// constraints aren't met.
type PullBinanceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PullBinanceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PullBinanceDataRequestMultiError) AllErrors() []error { return m }

// PullBinanceDataRequestValidationError is the validation error returned by
// PullBinanceDataRequest.Validate if the designated constraints aren't met.
type PullBinanceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullBinanceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullBinanceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullBinanceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullBinanceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullBinanceDataRequestValidationError) ErrorName() string {
	return "PullBinanceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PullBinanceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullBinanceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullBinanceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullBinanceDataRequestValidationError{}

// Validate checks the field values on PullBinanceDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PullBinanceDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PullBinanceDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PullBinanceDataReplyMultiError, or nil if none found.
func (m *PullBinanceDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PullBinanceDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PullBinanceDataReplyMultiError(errors)
	}

	return nil
}

// PullBinanceDataReplyMultiError is an error wrapping multiple validation
// errors returned by PullBinanceDataReply.ValidateAll() if the designated
// constraints aren't met.
type PullBinanceDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PullBinanceDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PullBinanceDataReplyMultiError) AllErrors() []error { return m }

// PullBinanceDataReplyValidationError is the validation error returned by
// PullBinanceDataReply.Validate if the designated constraints aren't met.
type PullBinanceDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullBinanceDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullBinanceDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullBinanceDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullBinanceDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullBinanceDataReplyValidationError) ErrorName() string {
	return "PullBinanceDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PullBinanceDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullBinanceDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullBinanceDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullBinanceDataReplyValidationError{}

// Validate checks the field values on XNIntervalMAvgEndPriceDataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *XNIntervalMAvgEndPriceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on XNIntervalMAvgEndPriceDataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataRequestMultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, XNIntervalMAvgEndPriceDataRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, XNIntervalMAvgEndPriceDataRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return XNIntervalMAvgEndPriceDataRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataRequestMultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataRequestMultiError is an error wrapping multiple
// validation errors returned by
// XNIntervalMAvgEndPriceDataRequest.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataRequestMultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataRequestValidationError is the validation error
// returned by XNIntervalMAvgEndPriceDataRequest.Validate if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataRequestValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataRequestValidationError{}

// Validate checks the field values on XNIntervalMAvgEndPriceDataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on XNIntervalMAvgEndPriceDataReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReplyMultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataListK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMa5M5() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa5M5[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa5M5[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMa5M5[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMa10M5() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa10M5[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa10M5[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMa10M5[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMa5M15() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa5M15[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa5M15[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMa5M15[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMa10M15() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa10M15[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa10M15[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMa10M15[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMa5M60() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa5M60[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa5M60[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMa5M60[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMa10M60() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa10M60[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMa10M60[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMa10M60[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("OperationData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OperationOrderTotal

	// no validation rules for OperationWinRate

	// no validation rules for OperationWinAmount

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReplyMultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReplyMultiError is an error wrapping multiple
// validation errors returned by XNIntervalMAvgEndPriceDataReply.ValidateAll()
// if the designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReplyMultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReplyValidationError is the validation error
// returned by XNIntervalMAvgEndPriceDataReply.Validate if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReplyValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReplyValidationError{}

// Validate checks the field values on KAnd2NIntervalMAvgEndPriceDataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KAnd2NIntervalMAvgEndPriceDataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataRequestMultiError, or nil if none found.
func (m *KAnd2NIntervalMAvgEndPriceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSendBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KAnd2NIntervalMAvgEndPriceDataRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KAnd2NIntervalMAvgEndPriceDataRequestValidationError{
					field:  "SendBody",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSendBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KAnd2NIntervalMAvgEndPriceDataRequestValidationError{
				field:  "SendBody",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataRequestMultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataRequestMultiError is an error wrapping
// multiple validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataRequest.ValidateAll() if the designated
// constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataRequestMultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataRequestValidationError is the validation error
// returned by KAnd2NIntervalMAvgEndPriceDataRequest.Validate if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataRequestValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataRequestValidationError{}

// Validate checks the field values on KAnd2NIntervalMAvgEndPriceDataReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KAnd2NIntervalMAvgEndPriceDataReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataReplyMultiError, or nil if none found.
func (m *KAnd2NIntervalMAvgEndPriceDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataListK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMaNMFirst() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMaNMSecond() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMSecond[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMSecond[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMaNMSecond[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBackGround() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("BackGround[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("BackGround[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("BackGround[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KAnd2NIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("OperationData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OperationOrderTotal

	// no validation rules for OperationWinRate

	// no validation rules for OperationWinAmount

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataReplyMultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataReplyMultiError is an error wrapping multiple
// validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataReply.ValidateAll() if the designated
// constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataReplyMultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataReplyValidationError is the validation error
// returned by KAnd2NIntervalMAvgEndPriceDataReply.Validate if the designated
// constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataReplyValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataReplyValidationError{}

// Validate checks the field values on OrderAreaPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderAreaPointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderAreaPointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderAreaPointRequestMultiError, or nil if none found.
func (m *OrderAreaPointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderAreaPointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Test

	// no validation rules for Start

	// no validation rules for User

	if len(errors) > 0 {
		return OrderAreaPointRequestMultiError(errors)
	}

	return nil
}

// OrderAreaPointRequestMultiError is an error wrapping multiple validation
// errors returned by OrderAreaPointRequest.ValidateAll() if the designated
// constraints aren't met.
type OrderAreaPointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderAreaPointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderAreaPointRequestMultiError) AllErrors() []error { return m }

// OrderAreaPointRequestValidationError is the validation error returned by
// OrderAreaPointRequest.Validate if the designated constraints aren't met.
type OrderAreaPointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderAreaPointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderAreaPointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderAreaPointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderAreaPointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderAreaPointRequestValidationError) ErrorName() string {
	return "OrderAreaPointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrderAreaPointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderAreaPointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderAreaPointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderAreaPointRequestValidationError{}

// Validate checks the field values on OrderAreaPointReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderAreaPointReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderAreaPointReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderAreaPointReplyMultiError, or nil if none found.
func (m *OrderAreaPointReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderAreaPointReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderAreaPointReplyMultiError(errors)
	}

	return nil
}

// OrderAreaPointReplyMultiError is an error wrapping multiple validation
// errors returned by OrderAreaPointReply.ValidateAll() if the designated
// constraints aren't met.
type OrderAreaPointReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderAreaPointReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderAreaPointReplyMultiError) AllErrors() []error { return m }

// OrderAreaPointReplyValidationError is the validation error returned by
// OrderAreaPointReply.Validate if the designated constraints aren't met.
type OrderAreaPointReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderAreaPointReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderAreaPointReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderAreaPointReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderAreaPointReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderAreaPointReplyValidationError) ErrorName() string {
	return "OrderAreaPointReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OrderAreaPointReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderAreaPointReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderAreaPointReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderAreaPointReplyValidationError{}

// Validate checks the field values on AreaPointIntervalMAvgEndPriceDataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AreaPointIntervalMAvgEndPriceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AreaPointIntervalMAvgEndPriceDataRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AreaPointIntervalMAvgEndPriceDataRequestMultiError, or nil if none found.
func (m *AreaPointIntervalMAvgEndPriceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AreaPointIntervalMAvgEndPriceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for M

	// no validation rules for N

	// no validation rules for PointFirst

	// no validation rules for PointInterval

	// no validation rules for CoinType

	if len(errors) > 0 {
		return AreaPointIntervalMAvgEndPriceDataRequestMultiError(errors)
	}

	return nil
}

// AreaPointIntervalMAvgEndPriceDataRequestMultiError is an error wrapping
// multiple validation errors returned by
// AreaPointIntervalMAvgEndPriceDataRequest.ValidateAll() if the designated
// constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreaPointIntervalMAvgEndPriceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreaPointIntervalMAvgEndPriceDataRequestMultiError) AllErrors() []error { return m }

// AreaPointIntervalMAvgEndPriceDataRequestValidationError is the validation
// error returned by AreaPointIntervalMAvgEndPriceDataRequest.Validate if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreaPointIntervalMAvgEndPriceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreaPointIntervalMAvgEndPriceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreaPointIntervalMAvgEndPriceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreaPointIntervalMAvgEndPriceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreaPointIntervalMAvgEndPriceDataRequestValidationError) ErrorName() string {
	return "AreaPointIntervalMAvgEndPriceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AreaPointIntervalMAvgEndPriceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreaPointIntervalMAvgEndPriceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreaPointIntervalMAvgEndPriceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreaPointIntervalMAvgEndPriceDataRequestValidationError{}

// Validate checks the field values on AreaPointIntervalMAvgEndPriceDataReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AreaPointIntervalMAvgEndPriceDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AreaPointIntervalMAvgEndPriceDataReplyMultiError, or nil if none found.
func (m *AreaPointIntervalMAvgEndPriceDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AreaPointIntervalMAvgEndPriceDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataListK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AreaPointIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMaNMFirst() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AreaPointIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListSubPoint() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListSubPoint[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListSubPoint[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AreaPointIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListSubPoint[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AreaPointIntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AreaPointIntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("OperationData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OperationOrderTotal

	// no validation rules for OperationWinRate

	// no validation rules for OperationWinAmount

	if len(errors) > 0 {
		return AreaPointIntervalMAvgEndPriceDataReplyMultiError(errors)
	}

	return nil
}

// AreaPointIntervalMAvgEndPriceDataReplyMultiError is an error wrapping
// multiple validation errors returned by
// AreaPointIntervalMAvgEndPriceDataReply.ValidateAll() if the designated
// constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreaPointIntervalMAvgEndPriceDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreaPointIntervalMAvgEndPriceDataReplyMultiError) AllErrors() []error { return m }

// AreaPointIntervalMAvgEndPriceDataReplyValidationError is the validation
// error returned by AreaPointIntervalMAvgEndPriceDataReply.Validate if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreaPointIntervalMAvgEndPriceDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreaPointIntervalMAvgEndPriceDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreaPointIntervalMAvgEndPriceDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreaPointIntervalMAvgEndPriceDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreaPointIntervalMAvgEndPriceDataReplyValidationError) ErrorName() string {
	return "AreaPointIntervalMAvgEndPriceDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AreaPointIntervalMAvgEndPriceDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreaPointIntervalMAvgEndPriceDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreaPointIntervalMAvgEndPriceDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreaPointIntervalMAvgEndPriceDataReplyValidationError{}

// Validate checks the field values on
// IntervalMAvgEndPriceMacdAndAtrDataRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntervalMAvgEndPriceMacdAndAtrDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMAvgEndPriceMacdAndAtrDataRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntervalMAvgEndPriceMacdAndAtrDataRequestMultiError, or nil if none found.
func (m *IntervalMAvgEndPriceMacdAndAtrDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceMacdAndAtrDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for M

	// no validation rules for Max1

	// no validation rules for Max2

	// no validation rules for Low1

	// no validation rules for Low2

	// no validation rules for Atr1N

	// no validation rules for Atr2N

	// no validation rules for CoinType

	if len(errors) > 0 {
		return IntervalMAvgEndPriceMacdAndAtrDataRequestMultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceMacdAndAtrDataRequestMultiError is an error wrapping
// multiple validation errors returned by
// IntervalMAvgEndPriceMacdAndAtrDataRequest.ValidateAll() if the designated
// constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceMacdAndAtrDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceMacdAndAtrDataRequestMultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError is the validation
// error returned by IntervalMAvgEndPriceMacdAndAtrDataRequest.Validate if the
// designated constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceMacdAndAtrDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceMacdAndAtrDataRequestValidationError{}

// Validate checks the field values on IntervalMAvgEndPriceMacdAndAtrDataReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IntervalMAvgEndPriceMacdAndAtrDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMAvgEndPriceMacdAndAtrDataReply with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IntervalMAvgEndPriceMacdAndAtrDataReplyMultiError, or nil if none found.
func (m *IntervalMAvgEndPriceMacdAndAtrDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceMacdAndAtrDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataListK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{
					field:  fmt.Sprintf("DataListK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{
					field:  fmt.Sprintf("OperationData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OperationOrderTotal

	// no validation rules for OperationWinRate

	// no validation rules for OperationWinAmount

	if len(errors) > 0 {
		return IntervalMAvgEndPriceMacdAndAtrDataReplyMultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceMacdAndAtrDataReplyMultiError is an error wrapping
// multiple validation errors returned by
// IntervalMAvgEndPriceMacdAndAtrDataReply.ValidateAll() if the designated
// constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceMacdAndAtrDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceMacdAndAtrDataReplyMultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError is the validation
// error returned by IntervalMAvgEndPriceMacdAndAtrDataReply.Validate if the
// designated constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceMacdAndAtrDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceMacdAndAtrDataReplyValidationError{}

// Validate checks the field values on IntervalMAvgEndPriceDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMAvgEndPriceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMAvgEndPriceDataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntervalMAvgEndPriceDataRequestMultiError, or nil if none found.
func (m *IntervalMAvgEndPriceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for M

	// no validation rules for N

	// no validation rules for Fee

	// no validation rules for TargetCloseRate

	if len(errors) > 0 {
		return IntervalMAvgEndPriceDataRequestMultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceDataRequestMultiError is an error wrapping multiple
// validation errors returned by IntervalMAvgEndPriceDataRequest.ValidateAll()
// if the designated constraints aren't met.
type IntervalMAvgEndPriceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceDataRequestMultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceDataRequestValidationError is the validation error
// returned by IntervalMAvgEndPriceDataRequest.Validate if the designated
// constraints aren't met.
type IntervalMAvgEndPriceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMAvgEndPriceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceDataRequestValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceDataRequestValidationError{}

// Validate checks the field values on IntervalMAvgEndPriceDataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMAvgEndPriceDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMAvgEndPriceDataReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntervalMAvgEndPriceDataReplyMultiError, or nil if none found.
func (m *IntervalMAvgEndPriceDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataListK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMaNMFirst() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("DataListMaNMFirst[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMAvgEndPriceDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMAvgEndPriceDataReplyValidationError{
					field:  fmt.Sprintf("OperationData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OperationOrderTotal

	// no validation rules for OperationWinRate

	// no validation rules for OperationWinAmount

	if len(errors) > 0 {
		return IntervalMAvgEndPriceDataReplyMultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceDataReplyMultiError is an error wrapping multiple
// validation errors returned by IntervalMAvgEndPriceDataReply.ValidateAll()
// if the designated constraints aren't met.
type IntervalMAvgEndPriceDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceDataReplyMultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceDataReplyValidationError is the validation error
// returned by IntervalMAvgEndPriceDataReply.Validate if the designated
// constraints aren't met.
type IntervalMAvgEndPriceDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMAvgEndPriceDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceDataReplyValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceDataReplyValidationError{}

// Validate checks the field values on IntervalMMACDDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMMACDDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMMACDDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntervalMMACDDataRequestMultiError, or nil if none found.
func (m *IntervalMMACDDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMMACDDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for M

	// no validation rules for N

	// no validation rules for K

	if len(errors) > 0 {
		return IntervalMMACDDataRequestMultiError(errors)
	}

	return nil
}

// IntervalMMACDDataRequestMultiError is an error wrapping multiple validation
// errors returned by IntervalMMACDDataRequest.ValidateAll() if the designated
// constraints aren't met.
type IntervalMMACDDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMMACDDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMMACDDataRequestMultiError) AllErrors() []error { return m }

// IntervalMMACDDataRequestValidationError is the validation error returned by
// IntervalMMACDDataRequest.Validate if the designated constraints aren't met.
type IntervalMMACDDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMMACDDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMMACDDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMMACDDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMMACDDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMMACDDataRequestValidationError) ErrorName() string {
	return "IntervalMMACDDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMMACDDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMMACDDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMMACDDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMMACDDataRequestValidationError{}

// Validate checks the field values on IntervalMMACDDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMMACDDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMMACDDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntervalMMACDDataReplyMultiError, or nil if none found.
func (m *IntervalMMACDDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMMACDDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataListK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMMACDDataReplyValidationError{
					field:  fmt.Sprintf("DataListK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListMacd() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListMacd[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListMacd[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMMACDDataReplyValidationError{
					field:  fmt.Sprintf("DataListMacd[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMMACDDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMMACDDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMMACDDataReplyValidationError{
					field:  fmt.Sprintf("OperationData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OperationOrderTotal

	// no validation rules for OperationWinRate

	// no validation rules for OperationWinAmount

	if len(errors) > 0 {
		return IntervalMMACDDataReplyMultiError(errors)
	}

	return nil
}

// IntervalMMACDDataReplyMultiError is an error wrapping multiple validation
// errors returned by IntervalMMACDDataReply.ValidateAll() if the designated
// constraints aren't met.
type IntervalMMACDDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMMACDDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMMACDDataReplyMultiError) AllErrors() []error { return m }

// IntervalMMACDDataReplyValidationError is the validation error returned by
// IntervalMMACDDataReply.Validate if the designated constraints aren't met.
type IntervalMMACDDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMMACDDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMMACDDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMMACDDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMMACDDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMMACDDataReplyValidationError) ErrorName() string {
	return "IntervalMMACDDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMMACDDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMMACDDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMMACDDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMMACDDataReplyValidationError{}

// Validate checks the field values on IntervalMKAndMACDDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMKAndMACDDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMKAndMACDDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntervalMKAndMACDDataRequestMultiError, or nil if none found.
func (m *IntervalMKAndMACDDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for M

	// no validation rules for N

	// no validation rules for K

	if len(errors) > 0 {
		return IntervalMKAndMACDDataRequestMultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataRequestMultiError is an error wrapping multiple
// validation errors returned by IntervalMKAndMACDDataRequest.ValidateAll() if
// the designated constraints aren't met.
type IntervalMKAndMACDDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataRequestMultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataRequestValidationError is the validation error returned
// by IntervalMKAndMACDDataRequest.Validate if the designated constraints
// aren't met.
type IntervalMKAndMACDDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataRequestValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataRequestValidationError{}

// Validate checks the field values on IntervalMKAndMACDDataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMKAndMACDDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMKAndMACDDataReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntervalMKAndMACDDataReplyMultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDataListK() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListK[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMKAndMACDDataReplyValidationError{
					field:  fmt.Sprintf("DataListK[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListKMacd3() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListKMacd3[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListKMacd3[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMKAndMACDDataReplyValidationError{
					field:  fmt.Sprintf("DataListKMacd3[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDataListKMacd60() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListKMacd60[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("DataListKMacd60[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMKAndMACDDataReplyValidationError{
					field:  fmt.Sprintf("DataListKMacd60[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReplyValidationError{
						field:  fmt.Sprintf("OperationData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMKAndMACDDataReplyValidationError{
					field:  fmt.Sprintf("OperationData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OperationOrderTotal

	// no validation rules for OperationWinRate

	// no validation rules for OperationWinAmount

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReplyMultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReplyMultiError is an error wrapping multiple
// validation errors returned by IntervalMKAndMACDDataReply.ValidateAll() if
// the designated constraints aren't met.
type IntervalMKAndMACDDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReplyMultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReplyValidationError is the validation error returned
// by IntervalMKAndMACDDataReply.Validate if the designated constraints aren't met.
type IntervalMKAndMACDDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReplyValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReplyValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataRequest_SendBody with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataRequest_SendBody with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataRequest_SendBodyMultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for N1

	// no validation rules for N2

	for idx, item := range m.GetX() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError{
						field:  fmt.Sprintf("X[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError{
						field:  fmt.Sprintf("X[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError{
					field:  fmt.Sprintf("X[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataRequest_SendBodyMultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataRequest_SendBodyMultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataRequest_SendBody.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataRequest_SendBodyMultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError is the validation
// error returned by XNIntervalMAvgEndPriceDataRequest_SendBody.Validate if
// the designated constraints aren't met.
type XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataRequest_SendBodyValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataRequest_SendBody_List with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataRequest_SendBody_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataRequest_SendBody_List with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataRequest_SendBody_ListMultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataRequest_SendBody_List) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataRequest_SendBody_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for M

	// no validation rules for N

	// no validation rules for Method

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataRequest_SendBody_ListMultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataRequest_SendBody_ListMultiError is an error
// wrapping multiple validation errors returned by
// XNIntervalMAvgEndPriceDataRequest_SendBody_List.ValidateAll() if the
// designated constraints aren't met.
type XNIntervalMAvgEndPriceDataRequest_SendBody_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataRequest_SendBody_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataRequest_SendBody_ListMultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError is the
// validation error returned by
// XNIntervalMAvgEndPriceDataRequest_SendBody_List.Validate if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataRequest_SendBody_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataRequest_SendBody_ListValidationError{}

// Validate checks the field values on XNIntervalMAvgEndPriceDataReply_ListK
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_ListK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on XNIntervalMAvgEndPriceDataReply_ListK
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_ListKMultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_ListK) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_ListK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for TopPrice

	// no validation rules for LowPrice

	// no validation rules for AvgEndPrice

	// no validation rules for Time

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_ListKMultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_ListKMultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_ListK.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_ListKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_ListKMultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_ListKValidationError is the validation error
// returned by XNIntervalMAvgEndPriceDataReply_ListK.Validate if the
// designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_ListKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_ListKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_ListKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_ListKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_ListKValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_ListKValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_ListKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_ListK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_ListKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_ListKValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa5M5 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa5M5 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_ListMa5M5MultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M5) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgEndPrice

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_ListMa5M5MultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_ListMa5M5MultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_ListMa5M5.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa5M5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_ListMa5M5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_ListMa5M5MultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError is the validation
// error returned by XNIntervalMAvgEndPriceDataReply_ListMa5M5.Validate if the
// designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_ListMa5M5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_ListMa5M5ValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa10M5 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M5) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa10M5 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_ListMa10M5MultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M5) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M5) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgEndPrice

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_ListMa10M5MultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_ListMa10M5MultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_ListMa10M5.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa10M5MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_ListMa10M5MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_ListMa10M5MultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError is the validation
// error returned by XNIntervalMAvgEndPriceDataReply_ListMa10M5.Validate if
// the designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_ListMa10M5.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_ListMa10M5ValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa5M15 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M15) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa5M15 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_ListMa5M15MultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M15) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M15) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgEndPrice

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_ListMa5M15MultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_ListMa5M15MultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_ListMa5M15.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa5M15MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_ListMa5M15MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_ListMa5M15MultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError is the validation
// error returned by XNIntervalMAvgEndPriceDataReply_ListMa5M15.Validate if
// the designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_ListMa5M15.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_ListMa5M15ValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa10M15 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M15) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa10M15 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_ListMa10M15MultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M15) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M15) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgEndPrice

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_ListMa10M15MultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_ListMa10M15MultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_ListMa10M15.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa10M15MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_ListMa10M15MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_ListMa10M15MultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError is the validation
// error returned by XNIntervalMAvgEndPriceDataReply_ListMa10M15.Validate if
// the designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_ListMa10M15.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_ListMa10M15ValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa5M60 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M60) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa5M60 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_ListMa5M60MultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M60) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_ListMa5M60) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgEndPrice

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_ListMa5M60MultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_ListMa5M60MultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_ListMa5M60.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa5M60MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_ListMa5M60MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_ListMa5M60MultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError is the validation
// error returned by XNIntervalMAvgEndPriceDataReply_ListMa5M60.Validate if
// the designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_ListMa5M60.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_ListMa5M60ValidationError{}

// Validate checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa10M60 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M60) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// XNIntervalMAvgEndPriceDataReply_ListMa10M60 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_ListMa10M60MultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M60) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_ListMa10M60) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvgEndPrice

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_ListMa10M60MultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_ListMa10M60MultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_ListMa10M60.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa10M60MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_ListMa10M60MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_ListMa10M60MultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError is the validation
// error returned by XNIntervalMAvgEndPriceDataReply_ListMa10M60.Validate if
// the designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_ListMa10M60.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_ListMa10M60ValidationError{}

// Validate checks the field values on XNIntervalMAvgEndPriceDataReply_List2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *XNIntervalMAvgEndPriceDataReply_List2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on XNIntervalMAvgEndPriceDataReply_List2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// XNIntervalMAvgEndPriceDataReply_List2MultiError, or nil if none found.
func (m *XNIntervalMAvgEndPriceDataReply_List2) ValidateAll() error {
	return m.validate(true)
}

func (m *XNIntervalMAvgEndPriceDataReply_List2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Rate

	// no validation rules for Action

	if len(errors) > 0 {
		return XNIntervalMAvgEndPriceDataReply_List2MultiError(errors)
	}

	return nil
}

// XNIntervalMAvgEndPriceDataReply_List2MultiError is an error wrapping
// multiple validation errors returned by
// XNIntervalMAvgEndPriceDataReply_List2.ValidateAll() if the designated
// constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_List2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m XNIntervalMAvgEndPriceDataReply_List2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m XNIntervalMAvgEndPriceDataReply_List2MultiError) AllErrors() []error { return m }

// XNIntervalMAvgEndPriceDataReply_List2ValidationError is the validation error
// returned by XNIntervalMAvgEndPriceDataReply_List2.Validate if the
// designated constraints aren't met.
type XNIntervalMAvgEndPriceDataReply_List2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XNIntervalMAvgEndPriceDataReply_List2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XNIntervalMAvgEndPriceDataReply_List2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XNIntervalMAvgEndPriceDataReply_List2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XNIntervalMAvgEndPriceDataReply_List2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XNIntervalMAvgEndPriceDataReply_List2ValidationError) ErrorName() string {
	return "XNIntervalMAvgEndPriceDataReply_List2ValidationError"
}

// Error satisfies the builtin error interface
func (e XNIntervalMAvgEndPriceDataReply_List2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXNIntervalMAvgEndPriceDataReply_List2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XNIntervalMAvgEndPriceDataReply_List2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XNIntervalMAvgEndPriceDataReply_List2ValidationError{}

// Validate checks the field values on
// KAnd2NIntervalMAvgEndPriceDataRequest_SendBody with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// KAnd2NIntervalMAvgEndPriceDataRequest_SendBody with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyMultiError, or nil if none found.
func (m *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataRequest_SendBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for N1

	// no validation rules for N2

	// no validation rules for M1

	// no validation rules for M2

	// no validation rules for TopX

	// no validation rules for LowX

	// no validation rules for Fee

	// no validation rules for CloseCondition

	// no validation rules for CloseCondition2Rate

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyMultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyMultiError is an error
// wrapping multiple validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataRequest_SendBody.ValidateAll() if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyMultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError is the
// validation error returned by
// KAnd2NIntervalMAvgEndPriceDataRequest_SendBody.Validate if the designated
// constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataRequest_SendBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataRequest_SendBodyValidationError{}

// Validate checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListK with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListK with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataReply_ListKMultiError, or nil if none found.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListK) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataReply_ListKMultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataReply_ListKMultiError is an error wrapping
// multiple validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataReply_ListK.ValidateAll() if the designated
// constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListKMultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError is the validation
// error returned by KAnd2NIntervalMAvgEndPriceDataReply_ListK.Validate if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataReply_ListK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataReply_ListKValidationError{}

// Validate checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError, or nil if none found.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError is an error
// wrapping multiple validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst.ValidateAll() if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError is the
// validation error returned by
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst.Validate if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError{}

// Validate checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondMultiError, or nil if
// none found.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondMultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondMultiError is an error
// wrapping multiple validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond.ValidateAll() if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondMultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError is the
// validation error returned by
// KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond.Validate if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataReply_ListMaNMSecondValidationError{}

// Validate checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundMultiError, or nil if
// none found.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundMultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundMultiError is an error
// wrapping multiple validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround.ValidateAll() if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundMultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError is the
// validation error returned by
// KAnd2NIntervalMAvgEndPriceDataReply_ListBackGround.Validate if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataReply_ListBackGround.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataReply_ListBackGroundValidationError{}

// Validate checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_List2 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_List2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// KAnd2NIntervalMAvgEndPriceDataReply_List2 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// KAnd2NIntervalMAvgEndPriceDataReply_List2MultiError, or nil if none found.
func (m *KAnd2NIntervalMAvgEndPriceDataReply_List2) ValidateAll() error {
	return m.validate(true)
}

func (m *KAnd2NIntervalMAvgEndPriceDataReply_List2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Rate

	// no validation rules for Action

	if len(errors) > 0 {
		return KAnd2NIntervalMAvgEndPriceDataReply_List2MultiError(errors)
	}

	return nil
}

// KAnd2NIntervalMAvgEndPriceDataReply_List2MultiError is an error wrapping
// multiple validation errors returned by
// KAnd2NIntervalMAvgEndPriceDataReply_List2.ValidateAll() if the designated
// constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_List2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KAnd2NIntervalMAvgEndPriceDataReply_List2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KAnd2NIntervalMAvgEndPriceDataReply_List2MultiError) AllErrors() []error { return m }

// KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError is the validation
// error returned by KAnd2NIntervalMAvgEndPriceDataReply_List2.Validate if the
// designated constraints aren't met.
type KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError) ErrorName() string {
	return "KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError"
}

// Error satisfies the builtin error interface
func (e KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKAnd2NIntervalMAvgEndPriceDataReply_List2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KAnd2NIntervalMAvgEndPriceDataReply_List2ValidationError{}

// Validate checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_ListK with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AreaPointIntervalMAvgEndPriceDataReply_ListK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_ListK with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AreaPointIntervalMAvgEndPriceDataReply_ListKMultiError, or nil if none found.
func (m *AreaPointIntervalMAvgEndPriceDataReply_ListK) ValidateAll() error {
	return m.validate(true)
}

func (m *AreaPointIntervalMAvgEndPriceDataReply_ListK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	// no validation rules for X6

	if len(errors) > 0 {
		return AreaPointIntervalMAvgEndPriceDataReply_ListKMultiError(errors)
	}

	return nil
}

// AreaPointIntervalMAvgEndPriceDataReply_ListKMultiError is an error wrapping
// multiple validation errors returned by
// AreaPointIntervalMAvgEndPriceDataReply_ListK.ValidateAll() if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_ListKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreaPointIntervalMAvgEndPriceDataReply_ListKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreaPointIntervalMAvgEndPriceDataReply_ListKMultiError) AllErrors() []error { return m }

// AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError is the
// validation error returned by
// AreaPointIntervalMAvgEndPriceDataReply_ListK.Validate if the designated
// constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError) ErrorName() string {
	return "AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError"
}

// Error satisfies the builtin error interface
func (e AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreaPointIntervalMAvgEndPriceDataReply_ListK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreaPointIntervalMAvgEndPriceDataReply_ListKValidationError{}

// Validate checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError, or nil if
// none found.
func (m *AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst) ValidateAll() error {
	return m.validate(true)
}

func (m *AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	if len(errors) > 0 {
		return AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError(errors)
	}

	return nil
}

// AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError is an error
// wrapping multiple validation errors returned by
// AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst.ValidateAll() if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError) AllErrors() []error { return m }

// AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError is the
// validation error returned by
// AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst.Validate if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) ErrorName() string {
	return "AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError"
}

// Error satisfies the builtin error interface
func (e AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreaPointIntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError{}

// Validate checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_ListSubPoint with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AreaPointIntervalMAvgEndPriceDataReply_ListSubPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_ListSubPoint with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AreaPointIntervalMAvgEndPriceDataReply_ListSubPointMultiError, or nil if
// none found.
func (m *AreaPointIntervalMAvgEndPriceDataReply_ListSubPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *AreaPointIntervalMAvgEndPriceDataReply_ListSubPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	if len(errors) > 0 {
		return AreaPointIntervalMAvgEndPriceDataReply_ListSubPointMultiError(errors)
	}

	return nil
}

// AreaPointIntervalMAvgEndPriceDataReply_ListSubPointMultiError is an error
// wrapping multiple validation errors returned by
// AreaPointIntervalMAvgEndPriceDataReply_ListSubPoint.ValidateAll() if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_ListSubPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreaPointIntervalMAvgEndPriceDataReply_ListSubPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreaPointIntervalMAvgEndPriceDataReply_ListSubPointMultiError) AllErrors() []error { return m }

// AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError is the
// validation error returned by
// AreaPointIntervalMAvgEndPriceDataReply_ListSubPoint.Validate if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError) ErrorName() string {
	return "AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError"
}

// Error satisfies the builtin error interface
func (e AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreaPointIntervalMAvgEndPriceDataReply_ListSubPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreaPointIntervalMAvgEndPriceDataReply_ListSubPointValidationError{}

// Validate checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_List2 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AreaPointIntervalMAvgEndPriceDataReply_List2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AreaPointIntervalMAvgEndPriceDataReply_List2 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AreaPointIntervalMAvgEndPriceDataReply_List2MultiError, or nil if none found.
func (m *AreaPointIntervalMAvgEndPriceDataReply_List2) ValidateAll() error {
	return m.validate(true)
}

func (m *AreaPointIntervalMAvgEndPriceDataReply_List2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Rate

	// no validation rules for Action

	if len(errors) > 0 {
		return AreaPointIntervalMAvgEndPriceDataReply_List2MultiError(errors)
	}

	return nil
}

// AreaPointIntervalMAvgEndPriceDataReply_List2MultiError is an error wrapping
// multiple validation errors returned by
// AreaPointIntervalMAvgEndPriceDataReply_List2.ValidateAll() if the
// designated constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_List2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AreaPointIntervalMAvgEndPriceDataReply_List2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AreaPointIntervalMAvgEndPriceDataReply_List2MultiError) AllErrors() []error { return m }

// AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError is the
// validation error returned by
// AreaPointIntervalMAvgEndPriceDataReply_List2.Validate if the designated
// constraints aren't met.
type AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError) ErrorName() string {
	return "AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError"
}

// Error satisfies the builtin error interface
func (e AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAreaPointIntervalMAvgEndPriceDataReply_List2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AreaPointIntervalMAvgEndPriceDataReply_List2ValidationError{}

// Validate checks the field values on
// IntervalMAvgEndPriceMacdAndAtrDataReply_ListK with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntervalMAvgEndPriceMacdAndAtrDataReply_ListK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMAvgEndPriceMacdAndAtrDataReply_ListK with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntervalMAvgEndPriceMacdAndAtrDataReply_ListKMultiError, or nil if none found.
func (m *IntervalMAvgEndPriceMacdAndAtrDataReply_ListK) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceMacdAndAtrDataReply_ListK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	// no validation rules for X6

	// no validation rules for Xc1

	// no validation rules for Xc2

	// no validation rules for Xc3

	// no validation rules for Xc4

	if len(errors) > 0 {
		return IntervalMAvgEndPriceMacdAndAtrDataReply_ListKMultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceMacdAndAtrDataReply_ListKMultiError is an error wrapping
// multiple validation errors returned by
// IntervalMAvgEndPriceMacdAndAtrDataReply_ListK.ValidateAll() if the
// designated constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataReply_ListKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceMacdAndAtrDataReply_ListKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceMacdAndAtrDataReply_ListKMultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError is the
// validation error returned by
// IntervalMAvgEndPriceMacdAndAtrDataReply_ListK.Validate if the designated
// constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceMacdAndAtrDataReply_ListK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceMacdAndAtrDataReply_ListKValidationError{}

// Validate checks the field values on
// IntervalMAvgEndPriceMacdAndAtrDataReply_List2 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntervalMAvgEndPriceMacdAndAtrDataReply_List2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMAvgEndPriceMacdAndAtrDataReply_List2 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntervalMAvgEndPriceMacdAndAtrDataReply_List2MultiError, or nil if none found.
func (m *IntervalMAvgEndPriceMacdAndAtrDataReply_List2) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceMacdAndAtrDataReply_List2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Rate

	// no validation rules for Tag

	// no validation rules for LastMacd

	// no validation rules for TopPrice

	// no validation rules for LowPrice

	// no validation rules for Macd

	// no validation rules for LowKLowPrice

	// no validation rules for LowMacd

	// no validation rules for MaxKTopPrice

	// no validation rules for MaxMacd

	// no validation rules for CloseStatus

	// no validation rules for ClosePriceWin

	// no validation rules for ClosePriceLost

	if len(errors) > 0 {
		return IntervalMAvgEndPriceMacdAndAtrDataReply_List2MultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceMacdAndAtrDataReply_List2MultiError is an error wrapping
// multiple validation errors returned by
// IntervalMAvgEndPriceMacdAndAtrDataReply_List2.ValidateAll() if the
// designated constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataReply_List2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceMacdAndAtrDataReply_List2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceMacdAndAtrDataReply_List2MultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError is the
// validation error returned by
// IntervalMAvgEndPriceMacdAndAtrDataReply_List2.Validate if the designated
// constraints aren't met.
type IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceMacdAndAtrDataReply_List2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceMacdAndAtrDataReply_List2ValidationError{}

// Validate checks the field values on IntervalMAvgEndPriceDataReply_ListK with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntervalMAvgEndPriceDataReply_ListK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMAvgEndPriceDataReply_ListK
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntervalMAvgEndPriceDataReply_ListKMultiError, or nil if none found.
func (m *IntervalMAvgEndPriceDataReply_ListK) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceDataReply_ListK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	if len(errors) > 0 {
		return IntervalMAvgEndPriceDataReply_ListKMultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceDataReply_ListKMultiError is an error wrapping multiple
// validation errors returned by
// IntervalMAvgEndPriceDataReply_ListK.ValidateAll() if the designated
// constraints aren't met.
type IntervalMAvgEndPriceDataReply_ListKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceDataReply_ListKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceDataReply_ListKMultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceDataReply_ListKValidationError is the validation error
// returned by IntervalMAvgEndPriceDataReply_ListK.Validate if the designated
// constraints aren't met.
type IntervalMAvgEndPriceDataReply_ListKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceDataReply_ListKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceDataReply_ListKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMAvgEndPriceDataReply_ListKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceDataReply_ListKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceDataReply_ListKValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceDataReply_ListKValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceDataReply_ListKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceDataReply_ListK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceDataReply_ListKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceDataReply_ListKValidationError{}

// Validate checks the field values on
// IntervalMAvgEndPriceDataReply_ListMaNMFirst with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntervalMAvgEndPriceDataReply_ListMaNMFirst) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMAvgEndPriceDataReply_ListMaNMFirst with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError, or nil if none found.
func (m *IntervalMAvgEndPriceDataReply_ListMaNMFirst) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceDataReply_ListMaNMFirst) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	if len(errors) > 0 {
		return IntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError is an error wrapping
// multiple validation errors returned by
// IntervalMAvgEndPriceDataReply_ListMaNMFirst.ValidateAll() if the designated
// constraints aren't met.
type IntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceDataReply_ListMaNMFirstMultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError is the validation
// error returned by IntervalMAvgEndPriceDataReply_ListMaNMFirst.Validate if
// the designated constraints aren't met.
type IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceDataReply_ListMaNMFirst.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceDataReply_ListMaNMFirstValidationError{}

// Validate checks the field values on IntervalMAvgEndPriceDataReply_List2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntervalMAvgEndPriceDataReply_List2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMAvgEndPriceDataReply_List2
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntervalMAvgEndPriceDataReply_List2MultiError, or nil if none found.
func (m *IntervalMAvgEndPriceDataReply_List2) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMAvgEndPriceDataReply_List2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Rate

	// no validation rules for Action

	if len(errors) > 0 {
		return IntervalMAvgEndPriceDataReply_List2MultiError(errors)
	}

	return nil
}

// IntervalMAvgEndPriceDataReply_List2MultiError is an error wrapping multiple
// validation errors returned by
// IntervalMAvgEndPriceDataReply_List2.ValidateAll() if the designated
// constraints aren't met.
type IntervalMAvgEndPriceDataReply_List2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMAvgEndPriceDataReply_List2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMAvgEndPriceDataReply_List2MultiError) AllErrors() []error { return m }

// IntervalMAvgEndPriceDataReply_List2ValidationError is the validation error
// returned by IntervalMAvgEndPriceDataReply_List2.Validate if the designated
// constraints aren't met.
type IntervalMAvgEndPriceDataReply_List2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMAvgEndPriceDataReply_List2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMAvgEndPriceDataReply_List2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMAvgEndPriceDataReply_List2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMAvgEndPriceDataReply_List2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMAvgEndPriceDataReply_List2ValidationError) ErrorName() string {
	return "IntervalMAvgEndPriceDataReply_List2ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMAvgEndPriceDataReply_List2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMAvgEndPriceDataReply_List2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMAvgEndPriceDataReply_List2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMAvgEndPriceDataReply_List2ValidationError{}

// Validate checks the field values on IntervalMMACDDataReply_ListK with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMMACDDataReply_ListK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMMACDDataReply_ListK with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntervalMMACDDataReply_ListKMultiError, or nil if none found.
func (m *IntervalMMACDDataReply_ListK) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMMACDDataReply_ListK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	// no validation rules for X6

	if len(errors) > 0 {
		return IntervalMMACDDataReply_ListKMultiError(errors)
	}

	return nil
}

// IntervalMMACDDataReply_ListKMultiError is an error wrapping multiple
// validation errors returned by IntervalMMACDDataReply_ListK.ValidateAll() if
// the designated constraints aren't met.
type IntervalMMACDDataReply_ListKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMMACDDataReply_ListKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMMACDDataReply_ListKMultiError) AllErrors() []error { return m }

// IntervalMMACDDataReply_ListKValidationError is the validation error returned
// by IntervalMMACDDataReply_ListK.Validate if the designated constraints
// aren't met.
type IntervalMMACDDataReply_ListKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMMACDDataReply_ListKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMMACDDataReply_ListKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMMACDDataReply_ListKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMMACDDataReply_ListKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMMACDDataReply_ListKValidationError) ErrorName() string {
	return "IntervalMMACDDataReply_ListKValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMMACDDataReply_ListKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMMACDDataReply_ListK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMMACDDataReply_ListKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMMACDDataReply_ListKValidationError{}

// Validate checks the field values on IntervalMMACDDataReply_ListMacd with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMMACDDataReply_ListMacd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMMACDDataReply_ListMacd with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntervalMMACDDataReply_ListMacdMultiError, or nil if none found.
func (m *IntervalMMACDDataReply_ListMacd) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMMACDDataReply_ListMacd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	if len(errors) > 0 {
		return IntervalMMACDDataReply_ListMacdMultiError(errors)
	}

	return nil
}

// IntervalMMACDDataReply_ListMacdMultiError is an error wrapping multiple
// validation errors returned by IntervalMMACDDataReply_ListMacd.ValidateAll()
// if the designated constraints aren't met.
type IntervalMMACDDataReply_ListMacdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMMACDDataReply_ListMacdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMMACDDataReply_ListMacdMultiError) AllErrors() []error { return m }

// IntervalMMACDDataReply_ListMacdValidationError is the validation error
// returned by IntervalMMACDDataReply_ListMacd.Validate if the designated
// constraints aren't met.
type IntervalMMACDDataReply_ListMacdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMMACDDataReply_ListMacdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMMACDDataReply_ListMacdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMMACDDataReply_ListMacdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMMACDDataReply_ListMacdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMMACDDataReply_ListMacdValidationError) ErrorName() string {
	return "IntervalMMACDDataReply_ListMacdValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMMACDDataReply_ListMacdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMMACDDataReply_ListMacd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMMACDDataReply_ListMacdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMMACDDataReply_ListMacdValidationError{}

// Validate checks the field values on IntervalMMACDDataReply_List2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntervalMMACDDataReply_List2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMMACDDataReply_List2 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntervalMMACDDataReply_List2MultiError, or nil if none found.
func (m *IntervalMMACDDataReply_List2) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMMACDDataReply_List2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Rate

	// no validation rules for Action

	if len(errors) > 0 {
		return IntervalMMACDDataReply_List2MultiError(errors)
	}

	return nil
}

// IntervalMMACDDataReply_List2MultiError is an error wrapping multiple
// validation errors returned by IntervalMMACDDataReply_List2.ValidateAll() if
// the designated constraints aren't met.
type IntervalMMACDDataReply_List2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMMACDDataReply_List2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMMACDDataReply_List2MultiError) AllErrors() []error { return m }

// IntervalMMACDDataReply_List2ValidationError is the validation error returned
// by IntervalMMACDDataReply_List2.Validate if the designated constraints
// aren't met.
type IntervalMMACDDataReply_List2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMMACDDataReply_List2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMMACDDataReply_List2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMMACDDataReply_List2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMMACDDataReply_List2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMMACDDataReply_List2ValidationError) ErrorName() string {
	return "IntervalMMACDDataReply_List2ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMMACDDataReply_List2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMMACDDataReply_List2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMMACDDataReply_List2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMMACDDataReply_List2ValidationError{}

// Validate checks the field values on IntervalMKAndMACDDataReply_ListK with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntervalMKAndMACDDataReply_ListK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMKAndMACDDataReply_ListK with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntervalMKAndMACDDataReply_ListKMultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply_ListK) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply_ListK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	// no validation rules for X6

	// no validation rules for X151

	// no validation rules for X152

	// no validation rules for X153

	// no validation rules for X154

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReply_ListKMultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReply_ListKMultiError is an error wrapping multiple
// validation errors returned by
// IntervalMKAndMACDDataReply_ListK.ValidateAll() if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_ListKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReply_ListKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReply_ListKMultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReply_ListKValidationError is the validation error
// returned by IntervalMKAndMACDDataReply_ListK.Validate if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_ListKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReply_ListKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReply_ListKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReply_ListKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReply_ListKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReply_ListKValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReply_ListKValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReply_ListKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply_ListK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReply_ListKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReply_ListKValidationError{}

// Validate checks the field values on IntervalMKAndMACDDataReply_ListKMacd3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IntervalMKAndMACDDataReply_ListKMacd3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMKAndMACDDataReply_ListKMacd3
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntervalMKAndMACDDataReply_ListKMacd3MultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply_ListKMacd3) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply_ListKMacd3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	// no validation rules for X6

	// no validation rules for X31

	// no validation rules for X32

	// no validation rules for X33

	// no validation rules for X34

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReply_ListKMacd3MultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReply_ListKMacd3MultiError is an error wrapping
// multiple validation errors returned by
// IntervalMKAndMACDDataReply_ListKMacd3.ValidateAll() if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_ListKMacd3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReply_ListKMacd3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReply_ListKMacd3MultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReply_ListKMacd3ValidationError is the validation error
// returned by IntervalMKAndMACDDataReply_ListKMacd3.Validate if the
// designated constraints aren't met.
type IntervalMKAndMACDDataReply_ListKMacd3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReply_ListKMacd3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReply_ListKMacd3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReply_ListKMacd3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReply_ListKMacd3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReply_ListKMacd3ValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReply_ListKMacd3ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReply_ListKMacd3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply_ListKMacd3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReply_ListKMacd3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReply_ListKMacd3ValidationError{}

// Validate checks the field values on IntervalMKAndMACDDataReply_ListKMacd60
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IntervalMKAndMACDDataReply_ListKMacd60) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMKAndMACDDataReply_ListKMacd60 with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IntervalMKAndMACDDataReply_ListKMacd60MultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply_ListKMacd60) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply_ListKMacd60) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X1

	// no validation rules for X2

	// no validation rules for X3

	// no validation rules for X4

	// no validation rules for X5

	// no validation rules for X6

	// no validation rules for X601

	// no validation rules for X602

	// no validation rules for X603

	// no validation rules for X604

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReply_ListKMacd60MultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReply_ListKMacd60MultiError is an error wrapping
// multiple validation errors returned by
// IntervalMKAndMACDDataReply_ListKMacd60.ValidateAll() if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_ListKMacd60MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReply_ListKMacd60MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReply_ListKMacd60MultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReply_ListKMacd60ValidationError is the validation
// error returned by IntervalMKAndMACDDataReply_ListKMacd60.Validate if the
// designated constraints aren't met.
type IntervalMKAndMACDDataReply_ListKMacd60ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReply_ListKMacd60ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReply_ListKMacd60ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReply_ListKMacd60ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReply_ListKMacd60ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReply_ListKMacd60ValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReply_ListKMacd60ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReply_ListKMacd60ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply_ListKMacd60.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReply_ListKMacd60ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReply_ListKMacd60ValidationError{}

// Validate checks the field values on IntervalMKAndMACDDataReply_List2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntervalMKAndMACDDataReply_List2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntervalMKAndMACDDataReply_List2 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntervalMKAndMACDDataReply_List2MultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply_List2) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply_List2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartPrice

	// no validation rules for EndPrice

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Rate

	// no validation rules for Action

	for idx, item := range m.GetMacd3Data() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReply_List2ValidationError{
						field:  fmt.Sprintf("Macd3Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReply_List2ValidationError{
						field:  fmt.Sprintf("Macd3Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMKAndMACDDataReply_List2ValidationError{
					field:  fmt.Sprintf("Macd3Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMacdData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReply_List2ValidationError{
						field:  fmt.Sprintf("MacdData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReply_List2ValidationError{
						field:  fmt.Sprintf("MacdData[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMKAndMACDDataReply_List2ValidationError{
					field:  fmt.Sprintf("MacdData[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMacd60Data() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReply_List2ValidationError{
						field:  fmt.Sprintf("Macd60Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntervalMKAndMACDDataReply_List2ValidationError{
						field:  fmt.Sprintf("Macd60Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntervalMKAndMACDDataReply_List2ValidationError{
					field:  fmt.Sprintf("Macd60Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReply_List2MultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReply_List2MultiError is an error wrapping multiple
// validation errors returned by
// IntervalMKAndMACDDataReply_List2.ValidateAll() if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_List2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReply_List2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReply_List2MultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReply_List2ValidationError is the validation error
// returned by IntervalMKAndMACDDataReply_List2.Validate if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_List2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReply_List2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReply_List2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReply_List2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReply_List2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReply_List2ValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReply_List2ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReply_List2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply_List2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReply_List2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReply_List2ValidationError{}

// Validate checks the field values on
// IntervalMKAndMACDDataReply_List2_ListMacd3 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntervalMKAndMACDDataReply_List2_ListMacd3) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMKAndMACDDataReply_List2_ListMacd3 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntervalMKAndMACDDataReply_List2_ListMacd3MultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply_List2_ListMacd3) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply_List2_ListMacd3) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X31

	// no validation rules for X32

	// no validation rules for X33

	// no validation rules for X34

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReply_List2_ListMacd3MultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReply_List2_ListMacd3MultiError is an error wrapping
// multiple validation errors returned by
// IntervalMKAndMACDDataReply_List2_ListMacd3.ValidateAll() if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_List2_ListMacd3MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReply_List2_ListMacd3MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReply_List2_ListMacd3MultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError is the validation
// error returned by IntervalMKAndMACDDataReply_List2_ListMacd3.Validate if
// the designated constraints aren't met.
type IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply_List2_ListMacd3.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReply_List2_ListMacd3ValidationError{}

// Validate checks the field values on
// IntervalMKAndMACDDataReply_List2_ListMacd with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntervalMKAndMACDDataReply_List2_ListMacd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMKAndMACDDataReply_List2_ListMacd with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntervalMKAndMACDDataReply_List2_ListMacdMultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply_List2_ListMacd) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply_List2_ListMacd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X31

	// no validation rules for X32

	// no validation rules for X33

	// no validation rules for X34

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReply_List2_ListMacdMultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReply_List2_ListMacdMultiError is an error wrapping
// multiple validation errors returned by
// IntervalMKAndMACDDataReply_List2_ListMacd.ValidateAll() if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_List2_ListMacdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReply_List2_ListMacdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReply_List2_ListMacdMultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReply_List2_ListMacdValidationError is the validation
// error returned by IntervalMKAndMACDDataReply_List2_ListMacd.Validate if the
// designated constraints aren't met.
type IntervalMKAndMACDDataReply_List2_ListMacdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReply_List2_ListMacdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReply_List2_ListMacdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReply_List2_ListMacdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReply_List2_ListMacdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReply_List2_ListMacdValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReply_List2_ListMacdValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReply_List2_ListMacdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply_List2_ListMacd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReply_List2_ListMacdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReply_List2_ListMacdValidationError{}

// Validate checks the field values on
// IntervalMKAndMACDDataReply_List2_ListMacd60 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntervalMKAndMACDDataReply_List2_ListMacd60) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntervalMKAndMACDDataReply_List2_ListMacd60 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntervalMKAndMACDDataReply_List2_ListMacd60MultiError, or nil if none found.
func (m *IntervalMKAndMACDDataReply_List2_ListMacd60) ValidateAll() error {
	return m.validate(true)
}

func (m *IntervalMKAndMACDDataReply_List2_ListMacd60) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X31

	// no validation rules for X32

	// no validation rules for X33

	// no validation rules for X34

	if len(errors) > 0 {
		return IntervalMKAndMACDDataReply_List2_ListMacd60MultiError(errors)
	}

	return nil
}

// IntervalMKAndMACDDataReply_List2_ListMacd60MultiError is an error wrapping
// multiple validation errors returned by
// IntervalMKAndMACDDataReply_List2_ListMacd60.ValidateAll() if the designated
// constraints aren't met.
type IntervalMKAndMACDDataReply_List2_ListMacd60MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntervalMKAndMACDDataReply_List2_ListMacd60MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntervalMKAndMACDDataReply_List2_ListMacd60MultiError) AllErrors() []error { return m }

// IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError is the validation
// error returned by IntervalMKAndMACDDataReply_List2_ListMacd60.Validate if
// the designated constraints aren't met.
type IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError) ErrorName() string {
	return "IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError"
}

// Error satisfies the builtin error interface
func (e IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntervalMKAndMACDDataReply_List2_ListMacd60.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntervalMKAndMACDDataReply_List2_ListMacd60ValidationError{}
